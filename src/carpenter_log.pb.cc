// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "carpenter_log.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace carpenter {

namespace {

const ::google::protobuf::Descriptor* RawLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RawLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pair_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSSawLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSSawLog_reflection_ = NULL;
const ::google::protobuf::Descriptor* SawLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SawLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ThreeValueBool_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* AppType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_carpenter_5flog_2eproto() {
  protobuf_AddDesc_carpenter_5flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "carpenter_log.proto");
  GOOGLE_CHECK(file != NULL);
  RawLog_descriptor_ = file->message_type(0);
  static const int RawLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, db_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, banner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, solution_id_),
  };
  RawLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RawLog_descriptor_,
      RawLog::default_instance_,
      RawLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RawLog, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RawLog));
  Pair_descriptor_ = file->message_type(1);
  static const int Pair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, value_),
  };
  Pair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pair_descriptor_,
      Pair::default_instance_,
      Pair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pair));
  CSSawLog_descriptor_ = file->message_type(2);
  static const int CSSawLog_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, raw_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_advertiser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_solution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_channel_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_channel_pool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_banner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_parent_banner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_banner_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, v_banner_pool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, placement_kvs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, language_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, os_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, browser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, operator_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, is_casting_),
  };
  CSSawLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSSawLog_descriptor_,
      CSSawLog::default_instance_,
      CSSawLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSSawLog, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSSawLog));
  SawLog_descriptor_ = file->message_type(3);
  static const int SawLog_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, raw_log_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, channel_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, channel_pool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, v_banner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, banner_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, banner_pool_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, v_solution_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, advertiser_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, language_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, os_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, browser_id_),
  };
  SawLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SawLog_descriptor_,
      SawLog::default_instance_,
      SawLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SawLog, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SawLog));
  ThreeValueBool_descriptor_ = file->enum_type(0);
  LogType_descriptor_ = file->enum_type(1);
  AppType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_carpenter_5flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RawLog_descriptor_, &RawLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pair_descriptor_, &Pair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSSawLog_descriptor_, &CSSawLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SawLog_descriptor_, &SawLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_carpenter_5flog_2eproto() {
  delete RawLog::default_instance_;
  delete RawLog_reflection_;
  delete Pair::default_instance_;
  delete Pair_reflection_;
  delete CSSawLog::default_instance_;
  delete CSSawLog_reflection_;
  delete SawLog::default_instance_;
  delete SawLog_reflection_;
}

void protobuf_AddDesc_carpenter_5flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023carpenter_log.proto\022\tcarpenter\"\226\001\n\006Raw"
    "Log\022\021\n\ttimestamp\030\001 \001(\004\022 \n\004type\030\002 \001(\0162\022.c"
    "arpenter.LogType\022\017\n\007db_name\030\003 \001(\t\022\022\n\ncha"
    "nnel_id\030\013 \001(\t\022\021\n\tbanner_id\030\014 \001(\t\022\023\n\013solu"
    "tion_id\030\r \001(\t*\n\010\240\234\001\020\200\200\200\200\002\"\"\n\004Pair\022\013\n\003key"
    "\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\337\003\n\010CSSawLog\022\"\n\007ra"
    "w_log\030\001 \001(\0132\021.carpenter.RawLog\022\r\n\005count\030"
    "\002 \001(\r\022\027\n\017v_advertiser_id\030\003 \001(\t\022\025\n\rv_solu"
    "tion_id\030\004 \001(\t\022\025\n\rv_campaign_id\030\005 \001(\t\022\024\n\014"
    "v_channel_id\030\006 \001(\t\022\032\n\022v_channel_group_id"
    "\030\007 \001(\t\022\031\n\021v_channel_pool_id\030\010 \001(\t\022\023\n\013v_b"
    "anner_id\030\t \001(\t\022\032\n\022v_parent_banner_id\030\n \001"
    "(\t\022\031\n\021v_banner_group_id\030\013 \001(\t\022\030\n\020v_banne"
    "r_pool_id\030\014 \001(\t\022&\n\rplacement_kvs\030\r \003(\0132\017"
    ".carpenter.Pair\022\021\n\tregion_id\030\016 \001(\t\022\023\n\013la"
    "nguage_id\030\017 \001(\t\022\r\n\005os_id\030\020 \001(\t\022\022\n\nbrowse"
    "r_id\030\021 \001(\t\022\023\n\013operator_id\030\022 \001(\t\022\022\n\nis_ca"
    "sting\030\023 \001(\010*\n\010\240\234\001\020\200\200\200\200\002\"\277\002\n\006SawLog\022\"\n\007ra"
    "w_log\030\001 \001(\0132\021.carpenter.RawLog\022\030\n\020channe"
    "l_group_id\030\002 \001(\t\022\027\n\017channel_pool_id\030\003 \001("
    "\t\022\023\n\013v_banner_id\030\004 \001(\t\022\027\n\017banner_group_i"
    "d\030\005 \001(\t\022\026\n\016banner_pool_id\030\006 \001(\t\022\025\n\rv_sol"
    "ution_id\030\007 \001(\t\022\023\n\013campaign_id\030\010 \001(\t\022\025\n\ra"
    "dvertiser_id\030\t \001(\t\022\021\n\tregion_id\030\n \001(\t\022\023\n"
    "\013language_id\030\013 \001(\t\022\r\n\005os_id\030\014 \001(\t\022\022\n\nbro"
    "wser_id\030\r \001(\t*\n\010\240\234\001\020\200\200\200\200\002*2\n\016ThreeValueB"
    "ool\022\013\n\007UNKNOWN\020\000\022\010\n\004TRUE\020\001\022\t\n\005FALSE\020\002*I\n"
    "\007LogType\022\010\n\004SHOW\020\001\022\t\n\005CLICK\020\002\022\t\n\005TRACK\020\003"
    "\022\013\n\007IDIGGER\020\004\022\021\n\rIDIGGER_EVENT\020\005*:\n\007AppT"
    "ype\022\013\n\007BROWSER\020\000\022\016\n\nMOBILE_SDK\020\001\022\022\n\016MOBI"
    "LE_BROWSER\020\002B%\n\024com.allyes.carpenterB\rCa"
    "rpenterLogs", 1251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "carpenter_log.proto", &protobuf_RegisterTypes);
  RawLog::default_instance_ = new RawLog();
  Pair::default_instance_ = new Pair();
  CSSawLog::default_instance_ = new CSSawLog();
  SawLog::default_instance_ = new SawLog();
  RawLog::default_instance_->InitAsDefaultInstance();
  Pair::default_instance_->InitAsDefaultInstance();
  CSSawLog::default_instance_->InitAsDefaultInstance();
  SawLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_carpenter_5flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_carpenter_5flog_2eproto {
  StaticDescriptorInitializer_carpenter_5flog_2eproto() {
    protobuf_AddDesc_carpenter_5flog_2eproto();
  }
} static_descriptor_initializer_carpenter_5flog_2eproto_;

const ::google::protobuf::EnumDescriptor* ThreeValueBool_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThreeValueBool_descriptor_;
}
bool ThreeValueBool_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogType_descriptor_;
}
bool LogType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* AppType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppType_descriptor_;
}
bool AppType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::std::string RawLog::_default_db_name_;
const ::std::string RawLog::_default_channel_id_;
const ::std::string RawLog::_default_banner_id_;
const ::std::string RawLog::_default_solution_id_;
#ifndef _MSC_VER
const int RawLog::kTimestampFieldNumber;
const int RawLog::kTypeFieldNumber;
const int RawLog::kDbNameFieldNumber;
const int RawLog::kChannelIdFieldNumber;
const int RawLog::kBannerIdFieldNumber;
const int RawLog::kSolutionIdFieldNumber;
#endif  // !_MSC_VER

RawLog::RawLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RawLog::InitAsDefaultInstance() {
}

RawLog::RawLog(const RawLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RawLog::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  db_name_ = const_cast< ::std::string*>(&_default_db_name_);
  channel_id_ = const_cast< ::std::string*>(&_default_channel_id_);
  banner_id_ = const_cast< ::std::string*>(&_default_banner_id_);
  solution_id_ = const_cast< ::std::string*>(&_default_solution_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RawLog::~RawLog() {
  SharedDtor();
}

void RawLog::SharedDtor() {
  if (db_name_ != &_default_db_name_) {
    delete db_name_;
  }
  if (channel_id_ != &_default_channel_id_) {
    delete channel_id_;
  }
  if (banner_id_ != &_default_banner_id_) {
    delete banner_id_;
  }
  if (solution_id_ != &_default_solution_id_) {
    delete solution_id_;
  }
  if (this != default_instance_) {
  }
}

void RawLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RawLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RawLog_descriptor_;
}

const RawLog& RawLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carpenter_5flog_2eproto();  return *default_instance_;
}

RawLog* RawLog::default_instance_ = NULL;

RawLog* RawLog::New() const {
  return new RawLog;
}

void RawLog::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    if (_has_bit(2)) {
      if (db_name_ != &_default_db_name_) {
        db_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (channel_id_ != &_default_channel_id_) {
        channel_id_->clear();
      }
    }
    if (_has_bit(4)) {
      if (banner_id_ != &_default_banner_id_) {
        banner_id_->clear();
      }
    }
    if (_has_bit(5)) {
      if (solution_id_ != &_default_solution_id_) {
        solution_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RawLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .carpenter.LogType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (carpenter::LogType_IsValid(value)) {
            set_type(static_cast< carpenter::LogType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_name;
        break;
      }
      
      // optional string db_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_name().data(), this->db_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_channel_id;
        break;
      }
      
      // optional string channel_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_id().data(), this->channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_banner_id;
        break;
      }
      
      // optional string banner_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banner_id().data(), this->banner_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_solution_id;
        break;
      }
      
      // optional string solution_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_solution_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->solution_id().data(), this->solution_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((160000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RawLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 timestamp = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }
  
  // optional .carpenter.LogType type = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string db_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db_name(), output);
  }
  
  // optional string channel_id = 11;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->channel_id(), output);
  }
  
  // optional string banner_id = 12;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner_id().data(), this->banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->banner_id(), output);
  }
  
  // optional string solution_id = 13;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solution_id().data(), this->solution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->solution_id(), output);
  }
  
  // Extension range [20000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      20000, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RawLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 timestamp = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }
  
  // optional .carpenter.LogType type = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string db_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_name().data(), this->db_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_name(), target);
  }
  
  // optional string channel_id = 11;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_id().data(), this->channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->channel_id(), target);
  }
  
  // optional string banner_id = 12;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner_id().data(), this->banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->banner_id(), target);
  }
  
  // optional string solution_id = 13;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->solution_id().data(), this->solution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->solution_id(), target);
  }
  
  // Extension range [20000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      20000, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RawLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }
    
    // optional .carpenter.LogType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string db_name = 3;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }
    
    // optional string channel_id = 11;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_id());
    }
    
    // optional string banner_id = 12;
    if (has_banner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_id());
    }
    
    // optional string solution_id = 13;
    if (has_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->solution_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RawLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RawLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RawLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RawLog::MergeFrom(const RawLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(1)) {
      set_type(from.type());
    }
    if (from._has_bit(2)) {
      set_db_name(from.db_name());
    }
    if (from._has_bit(3)) {
      set_channel_id(from.channel_id());
    }
    if (from._has_bit(4)) {
      set_banner_id(from.banner_id());
    }
    if (from._has_bit(5)) {
      set_solution_id(from.solution_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RawLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawLog::CopyFrom(const RawLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawLog::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void RawLog::Swap(RawLog* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(type_, other->type_);
    std::swap(db_name_, other->db_name_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(banner_id_, other->banner_id_);
    std::swap(solution_id_, other->solution_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata RawLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RawLog_descriptor_;
  metadata.reflection = RawLog_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Pair::_default_key_;
const ::std::string Pair::_default_value_;
#ifndef _MSC_VER
const int Pair::kKeyFieldNumber;
const int Pair::kValueFieldNumber;
#endif  // !_MSC_VER

Pair::Pair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Pair::InitAsDefaultInstance() {
}

Pair::Pair(const Pair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Pair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&_default_key_);
  value_ = const_cast< ::std::string*>(&_default_value_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pair::~Pair() {
  SharedDtor();
}

void Pair::SharedDtor() {
  if (key_ != &_default_key_) {
    delete key_;
  }
  if (value_ != &_default_value_) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void Pair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pair_descriptor_;
}

const Pair& Pair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carpenter_5flog_2eproto();  return *default_instance_;
}

Pair* Pair::default_instance_ = NULL;

Pair* Pair::New() const {
  return new Pair;
}

void Pair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (key_ != &_default_key_) {
        key_->clear();
      }
    }
    if (_has_bit(1)) {
      if (value_ != &_default_value_) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Pair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Pair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }
  
  // required string value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Pair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }
    
    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pair::MergeFrom(const Pair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_key(from.key());
    }
    if (from._has_bit(1)) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pair::CopyFrom(const Pair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Pair::Swap(Pair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pair_descriptor_;
  metadata.reflection = Pair_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string CSSawLog::_default_v_advertiser_id_;
const ::std::string CSSawLog::_default_v_solution_id_;
const ::std::string CSSawLog::_default_v_campaign_id_;
const ::std::string CSSawLog::_default_v_channel_id_;
const ::std::string CSSawLog::_default_v_channel_group_id_;
const ::std::string CSSawLog::_default_v_channel_pool_id_;
const ::std::string CSSawLog::_default_v_banner_id_;
const ::std::string CSSawLog::_default_v_parent_banner_id_;
const ::std::string CSSawLog::_default_v_banner_group_id_;
const ::std::string CSSawLog::_default_v_banner_pool_id_;
const ::std::string CSSawLog::_default_region_id_;
const ::std::string CSSawLog::_default_language_id_;
const ::std::string CSSawLog::_default_os_id_;
const ::std::string CSSawLog::_default_browser_id_;
const ::std::string CSSawLog::_default_operator_id_;
#ifndef _MSC_VER
const int CSSawLog::kRawLogFieldNumber;
const int CSSawLog::kCountFieldNumber;
const int CSSawLog::kVAdvertiserIdFieldNumber;
const int CSSawLog::kVSolutionIdFieldNumber;
const int CSSawLog::kVCampaignIdFieldNumber;
const int CSSawLog::kVChannelIdFieldNumber;
const int CSSawLog::kVChannelGroupIdFieldNumber;
const int CSSawLog::kVChannelPoolIdFieldNumber;
const int CSSawLog::kVBannerIdFieldNumber;
const int CSSawLog::kVParentBannerIdFieldNumber;
const int CSSawLog::kVBannerGroupIdFieldNumber;
const int CSSawLog::kVBannerPoolIdFieldNumber;
const int CSSawLog::kPlacementKvsFieldNumber;
const int CSSawLog::kRegionIdFieldNumber;
const int CSSawLog::kLanguageIdFieldNumber;
const int CSSawLog::kOsIdFieldNumber;
const int CSSawLog::kBrowserIdFieldNumber;
const int CSSawLog::kOperatorIdFieldNumber;
const int CSSawLog::kIsCastingFieldNumber;
#endif  // !_MSC_VER

CSSawLog::CSSawLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSSawLog::InitAsDefaultInstance() {
  raw_log_ = const_cast< ::carpenter::RawLog*>(&::carpenter::RawLog::default_instance());
}

CSSawLog::CSSawLog(const CSSawLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSSawLog::SharedCtor() {
  _cached_size_ = 0;
  raw_log_ = NULL;
  count_ = 0u;
  v_advertiser_id_ = const_cast< ::std::string*>(&_default_v_advertiser_id_);
  v_solution_id_ = const_cast< ::std::string*>(&_default_v_solution_id_);
  v_campaign_id_ = const_cast< ::std::string*>(&_default_v_campaign_id_);
  v_channel_id_ = const_cast< ::std::string*>(&_default_v_channel_id_);
  v_channel_group_id_ = const_cast< ::std::string*>(&_default_v_channel_group_id_);
  v_channel_pool_id_ = const_cast< ::std::string*>(&_default_v_channel_pool_id_);
  v_banner_id_ = const_cast< ::std::string*>(&_default_v_banner_id_);
  v_parent_banner_id_ = const_cast< ::std::string*>(&_default_v_parent_banner_id_);
  v_banner_group_id_ = const_cast< ::std::string*>(&_default_v_banner_group_id_);
  v_banner_pool_id_ = const_cast< ::std::string*>(&_default_v_banner_pool_id_);
  region_id_ = const_cast< ::std::string*>(&_default_region_id_);
  language_id_ = const_cast< ::std::string*>(&_default_language_id_);
  os_id_ = const_cast< ::std::string*>(&_default_os_id_);
  browser_id_ = const_cast< ::std::string*>(&_default_browser_id_);
  operator_id_ = const_cast< ::std::string*>(&_default_operator_id_);
  is_casting_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSawLog::~CSSawLog() {
  SharedDtor();
}

void CSSawLog::SharedDtor() {
  if (v_advertiser_id_ != &_default_v_advertiser_id_) {
    delete v_advertiser_id_;
  }
  if (v_solution_id_ != &_default_v_solution_id_) {
    delete v_solution_id_;
  }
  if (v_campaign_id_ != &_default_v_campaign_id_) {
    delete v_campaign_id_;
  }
  if (v_channel_id_ != &_default_v_channel_id_) {
    delete v_channel_id_;
  }
  if (v_channel_group_id_ != &_default_v_channel_group_id_) {
    delete v_channel_group_id_;
  }
  if (v_channel_pool_id_ != &_default_v_channel_pool_id_) {
    delete v_channel_pool_id_;
  }
  if (v_banner_id_ != &_default_v_banner_id_) {
    delete v_banner_id_;
  }
  if (v_parent_banner_id_ != &_default_v_parent_banner_id_) {
    delete v_parent_banner_id_;
  }
  if (v_banner_group_id_ != &_default_v_banner_group_id_) {
    delete v_banner_group_id_;
  }
  if (v_banner_pool_id_ != &_default_v_banner_pool_id_) {
    delete v_banner_pool_id_;
  }
  if (region_id_ != &_default_region_id_) {
    delete region_id_;
  }
  if (language_id_ != &_default_language_id_) {
    delete language_id_;
  }
  if (os_id_ != &_default_os_id_) {
    delete os_id_;
  }
  if (browser_id_ != &_default_browser_id_) {
    delete browser_id_;
  }
  if (operator_id_ != &_default_operator_id_) {
    delete operator_id_;
  }
  if (this != default_instance_) {
    delete raw_log_;
  }
}

void CSSawLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSSawLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSSawLog_descriptor_;
}

const CSSawLog& CSSawLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carpenter_5flog_2eproto();  return *default_instance_;
}

CSSawLog* CSSawLog::default_instance_ = NULL;

CSSawLog* CSSawLog::New() const {
  return new CSSawLog;
}

void CSSawLog::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (raw_log_ != NULL) raw_log_->::carpenter::RawLog::Clear();
    }
    count_ = 0u;
    if (_has_bit(2)) {
      if (v_advertiser_id_ != &_default_v_advertiser_id_) {
        v_advertiser_id_->clear();
      }
    }
    if (_has_bit(3)) {
      if (v_solution_id_ != &_default_v_solution_id_) {
        v_solution_id_->clear();
      }
    }
    if (_has_bit(4)) {
      if (v_campaign_id_ != &_default_v_campaign_id_) {
        v_campaign_id_->clear();
      }
    }
    if (_has_bit(5)) {
      if (v_channel_id_ != &_default_v_channel_id_) {
        v_channel_id_->clear();
      }
    }
    if (_has_bit(6)) {
      if (v_channel_group_id_ != &_default_v_channel_group_id_) {
        v_channel_group_id_->clear();
      }
    }
    if (_has_bit(7)) {
      if (v_channel_pool_id_ != &_default_v_channel_pool_id_) {
        v_channel_pool_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (v_banner_id_ != &_default_v_banner_id_) {
        v_banner_id_->clear();
      }
    }
    if (_has_bit(9)) {
      if (v_parent_banner_id_ != &_default_v_parent_banner_id_) {
        v_parent_banner_id_->clear();
      }
    }
    if (_has_bit(10)) {
      if (v_banner_group_id_ != &_default_v_banner_group_id_) {
        v_banner_group_id_->clear();
      }
    }
    if (_has_bit(11)) {
      if (v_banner_pool_id_ != &_default_v_banner_pool_id_) {
        v_banner_pool_id_->clear();
      }
    }
    if (_has_bit(13)) {
      if (region_id_ != &_default_region_id_) {
        region_id_->clear();
      }
    }
    if (_has_bit(14)) {
      if (language_id_ != &_default_language_id_) {
        language_id_->clear();
      }
    }
    if (_has_bit(15)) {
      if (os_id_ != &_default_os_id_) {
        os_id_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (_has_bit(16)) {
      if (browser_id_ != &_default_browser_id_) {
        browser_id_->clear();
      }
    }
    if (_has_bit(17)) {
      if (operator_id_ != &_default_operator_id_) {
        operator_id_->clear();
      }
    }
    is_casting_ = false;
  }
  placement_kvs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSSawLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .carpenter.RawLog raw_log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }
      
      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_v_advertiser_id;
        break;
      }
      
      // optional string v_advertiser_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_advertiser_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_advertiser_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_advertiser_id().data(), this->v_advertiser_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_v_solution_id;
        break;
      }
      
      // optional string v_solution_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_solution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_solution_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_solution_id().data(), this->v_solution_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_v_campaign_id;
        break;
      }
      
      // optional string v_campaign_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_campaign_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_campaign_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_campaign_id().data(), this->v_campaign_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_v_channel_id;
        break;
      }
      
      // optional string v_channel_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_channel_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_channel_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_channel_id().data(), this->v_channel_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_v_channel_group_id;
        break;
      }
      
      // optional string v_channel_group_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_channel_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_channel_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_channel_group_id().data(), this->v_channel_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_v_channel_pool_id;
        break;
      }
      
      // optional string v_channel_pool_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_channel_pool_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_channel_pool_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_channel_pool_id().data(), this->v_channel_pool_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_v_banner_id;
        break;
      }
      
      // optional string v_banner_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_banner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_banner_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_banner_id().data(), this->v_banner_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_v_parent_banner_id;
        break;
      }
      
      // optional string v_parent_banner_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_parent_banner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_parent_banner_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_parent_banner_id().data(), this->v_parent_banner_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_v_banner_group_id;
        break;
      }
      
      // optional string v_banner_group_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_banner_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_banner_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_banner_group_id().data(), this->v_banner_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_v_banner_pool_id;
        break;
      }
      
      // optional string v_banner_pool_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_banner_pool_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_banner_pool_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_banner_pool_id().data(), this->v_banner_pool_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_placement_kvs;
        break;
      }
      
      // repeated .carpenter.Pair placement_kvs = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placement_kvs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_placement_kvs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_placement_kvs;
        if (input->ExpectTag(114)) goto parse_region_id;
        break;
      }
      
      // optional string region_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region_id().data(), this->region_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_language_id;
        break;
      }
      
      // optional string language_id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language_id().data(), this->language_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_os_id;
        break;
      }
      
      // optional string os_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_id().data(), this->os_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_browser_id;
        break;
      }
      
      // optional string browser_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browser_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->browser_id().data(), this->browser_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_operator_id;
        break;
      }
      
      // optional string operator_id = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_operator_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_operator_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->operator_id().data(), this->operator_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_is_casting;
        break;
      }
      
      // optional bool is_casting = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_casting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_casting_)));
          _set_bit(18);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((160000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSawLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .carpenter.RawLog raw_log = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raw_log(), output);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }
  
  // optional string v_advertiser_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_advertiser_id().data(), this->v_advertiser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->v_advertiser_id(), output);
  }
  
  // optional string v_solution_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_solution_id().data(), this->v_solution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->v_solution_id(), output);
  }
  
  // optional string v_campaign_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_campaign_id().data(), this->v_campaign_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->v_campaign_id(), output);
  }
  
  // optional string v_channel_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_channel_id().data(), this->v_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->v_channel_id(), output);
  }
  
  // optional string v_channel_group_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_channel_group_id().data(), this->v_channel_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->v_channel_group_id(), output);
  }
  
  // optional string v_channel_pool_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_channel_pool_id().data(), this->v_channel_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->v_channel_pool_id(), output);
  }
  
  // optional string v_banner_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_id().data(), this->v_banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->v_banner_id(), output);
  }
  
  // optional string v_parent_banner_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_parent_banner_id().data(), this->v_parent_banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->v_parent_banner_id(), output);
  }
  
  // optional string v_banner_group_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_group_id().data(), this->v_banner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->v_banner_group_id(), output);
  }
  
  // optional string v_banner_pool_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_pool_id().data(), this->v_banner_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->v_banner_pool_id(), output);
  }
  
  // repeated .carpenter.Pair placement_kvs = 13;
  for (int i = 0; i < this->placement_kvs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->placement_kvs(i), output);
  }
  
  // optional string region_id = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region_id().data(), this->region_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->region_id(), output);
  }
  
  // optional string language_id = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language_id().data(), this->language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->language_id(), output);
  }
  
  // optional string os_id = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_id().data(), this->os_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->os_id(), output);
  }
  
  // optional string browser_id = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browser_id().data(), this->browser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->browser_id(), output);
  }
  
  // optional string operator_id = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_id().data(), this->operator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->operator_id(), output);
  }
  
  // optional bool is_casting = 19;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->is_casting(), output);
  }
  
  // Extension range [20000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      20000, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSSawLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .carpenter.RawLog raw_log = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raw_log(), target);
  }
  
  // optional uint32 count = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }
  
  // optional string v_advertiser_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_advertiser_id().data(), this->v_advertiser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->v_advertiser_id(), target);
  }
  
  // optional string v_solution_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_solution_id().data(), this->v_solution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->v_solution_id(), target);
  }
  
  // optional string v_campaign_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_campaign_id().data(), this->v_campaign_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->v_campaign_id(), target);
  }
  
  // optional string v_channel_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_channel_id().data(), this->v_channel_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->v_channel_id(), target);
  }
  
  // optional string v_channel_group_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_channel_group_id().data(), this->v_channel_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->v_channel_group_id(), target);
  }
  
  // optional string v_channel_pool_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_channel_pool_id().data(), this->v_channel_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->v_channel_pool_id(), target);
  }
  
  // optional string v_banner_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_id().data(), this->v_banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->v_banner_id(), target);
  }
  
  // optional string v_parent_banner_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_parent_banner_id().data(), this->v_parent_banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->v_parent_banner_id(), target);
  }
  
  // optional string v_banner_group_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_group_id().data(), this->v_banner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->v_banner_group_id(), target);
  }
  
  // optional string v_banner_pool_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_pool_id().data(), this->v_banner_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->v_banner_pool_id(), target);
  }
  
  // repeated .carpenter.Pair placement_kvs = 13;
  for (int i = 0; i < this->placement_kvs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->placement_kvs(i), target);
  }
  
  // optional string region_id = 14;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region_id().data(), this->region_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->region_id(), target);
  }
  
  // optional string language_id = 15;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language_id().data(), this->language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->language_id(), target);
  }
  
  // optional string os_id = 16;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_id().data(), this->os_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->os_id(), target);
  }
  
  // optional string browser_id = 17;
  if (_has_bit(16)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browser_id().data(), this->browser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->browser_id(), target);
  }
  
  // optional string operator_id = 18;
  if (_has_bit(17)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->operator_id().data(), this->operator_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->operator_id(), target);
  }
  
  // optional bool is_casting = 19;
  if (_has_bit(18)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->is_casting(), target);
  }
  
  // Extension range [20000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      20000, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSSawLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .carpenter.RawLog raw_log = 1;
    if (has_raw_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raw_log());
    }
    
    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // optional string v_advertiser_id = 3;
    if (has_v_advertiser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_advertiser_id());
    }
    
    // optional string v_solution_id = 4;
    if (has_v_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_solution_id());
    }
    
    // optional string v_campaign_id = 5;
    if (has_v_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_campaign_id());
    }
    
    // optional string v_channel_id = 6;
    if (has_v_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_channel_id());
    }
    
    // optional string v_channel_group_id = 7;
    if (has_v_channel_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_channel_group_id());
    }
    
    // optional string v_channel_pool_id = 8;
    if (has_v_channel_pool_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_channel_pool_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string v_banner_id = 9;
    if (has_v_banner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_banner_id());
    }
    
    // optional string v_parent_banner_id = 10;
    if (has_v_parent_banner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_parent_banner_id());
    }
    
    // optional string v_banner_group_id = 11;
    if (has_v_banner_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_banner_group_id());
    }
    
    // optional string v_banner_pool_id = 12;
    if (has_v_banner_pool_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_banner_pool_id());
    }
    
    // optional string region_id = 14;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region_id());
    }
    
    // optional string language_id = 15;
    if (has_language_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_id());
    }
    
    // optional string os_id = 16;
    if (has_os_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_id());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string browser_id = 17;
    if (has_browser_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_id());
    }
    
    // optional string operator_id = 18;
    if (has_operator_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->operator_id());
    }
    
    // optional bool is_casting = 19;
    if (has_is_casting()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .carpenter.Pair placement_kvs = 13;
  total_size += 1 * this->placement_kvs_size();
  for (int i = 0; i < this->placement_kvs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->placement_kvs(i));
  }
  
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSawLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSSawLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSSawLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSSawLog::MergeFrom(const CSSawLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  placement_kvs_.MergeFrom(from.placement_kvs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_raw_log()->::carpenter::RawLog::MergeFrom(from.raw_log());
    }
    if (from._has_bit(1)) {
      set_count(from.count());
    }
    if (from._has_bit(2)) {
      set_v_advertiser_id(from.v_advertiser_id());
    }
    if (from._has_bit(3)) {
      set_v_solution_id(from.v_solution_id());
    }
    if (from._has_bit(4)) {
      set_v_campaign_id(from.v_campaign_id());
    }
    if (from._has_bit(5)) {
      set_v_channel_id(from.v_channel_id());
    }
    if (from._has_bit(6)) {
      set_v_channel_group_id(from.v_channel_group_id());
    }
    if (from._has_bit(7)) {
      set_v_channel_pool_id(from.v_channel_pool_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_v_banner_id(from.v_banner_id());
    }
    if (from._has_bit(9)) {
      set_v_parent_banner_id(from.v_parent_banner_id());
    }
    if (from._has_bit(10)) {
      set_v_banner_group_id(from.v_banner_group_id());
    }
    if (from._has_bit(11)) {
      set_v_banner_pool_id(from.v_banner_pool_id());
    }
    if (from._has_bit(13)) {
      set_region_id(from.region_id());
    }
    if (from._has_bit(14)) {
      set_language_id(from.language_id());
    }
    if (from._has_bit(15)) {
      set_os_id(from.os_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from._has_bit(16)) {
      set_browser_id(from.browser_id());
    }
    if (from._has_bit(17)) {
      set_operator_id(from.operator_id());
    }
    if (from._has_bit(18)) {
      set_is_casting(from.is_casting());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSSawLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSSawLog::CopyFrom(const CSSawLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSawLog::IsInitialized() const {
  
  if (has_raw_log()) {
    if (!this->raw_log().IsInitialized()) return false;
  }
  for (int i = 0; i < placement_kvs_size(); i++) {
    if (!this->placement_kvs(i).IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void CSSawLog::Swap(CSSawLog* other) {
  if (other != this) {
    std::swap(raw_log_, other->raw_log_);
    std::swap(count_, other->count_);
    std::swap(v_advertiser_id_, other->v_advertiser_id_);
    std::swap(v_solution_id_, other->v_solution_id_);
    std::swap(v_campaign_id_, other->v_campaign_id_);
    std::swap(v_channel_id_, other->v_channel_id_);
    std::swap(v_channel_group_id_, other->v_channel_group_id_);
    std::swap(v_channel_pool_id_, other->v_channel_pool_id_);
    std::swap(v_banner_id_, other->v_banner_id_);
    std::swap(v_parent_banner_id_, other->v_parent_banner_id_);
    std::swap(v_banner_group_id_, other->v_banner_group_id_);
    std::swap(v_banner_pool_id_, other->v_banner_pool_id_);
    placement_kvs_.Swap(&other->placement_kvs_);
    std::swap(region_id_, other->region_id_);
    std::swap(language_id_, other->language_id_);
    std::swap(os_id_, other->os_id_);
    std::swap(browser_id_, other->browser_id_);
    std::swap(operator_id_, other->operator_id_);
    std::swap(is_casting_, other->is_casting_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata CSSawLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSSawLog_descriptor_;
  metadata.reflection = CSSawLog_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string SawLog::_default_channel_group_id_;
const ::std::string SawLog::_default_channel_pool_id_;
const ::std::string SawLog::_default_v_banner_id_;
const ::std::string SawLog::_default_banner_group_id_;
const ::std::string SawLog::_default_banner_pool_id_;
const ::std::string SawLog::_default_v_solution_id_;
const ::std::string SawLog::_default_campaign_id_;
const ::std::string SawLog::_default_advertiser_id_;
const ::std::string SawLog::_default_region_id_;
const ::std::string SawLog::_default_language_id_;
const ::std::string SawLog::_default_os_id_;
const ::std::string SawLog::_default_browser_id_;
#ifndef _MSC_VER
const int SawLog::kRawLogFieldNumber;
const int SawLog::kChannelGroupIdFieldNumber;
const int SawLog::kChannelPoolIdFieldNumber;
const int SawLog::kVBannerIdFieldNumber;
const int SawLog::kBannerGroupIdFieldNumber;
const int SawLog::kBannerPoolIdFieldNumber;
const int SawLog::kVSolutionIdFieldNumber;
const int SawLog::kCampaignIdFieldNumber;
const int SawLog::kAdvertiserIdFieldNumber;
const int SawLog::kRegionIdFieldNumber;
const int SawLog::kLanguageIdFieldNumber;
const int SawLog::kOsIdFieldNumber;
const int SawLog::kBrowserIdFieldNumber;
#endif  // !_MSC_VER

SawLog::SawLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SawLog::InitAsDefaultInstance() {
  raw_log_ = const_cast< ::carpenter::RawLog*>(&::carpenter::RawLog::default_instance());
}

SawLog::SawLog(const SawLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SawLog::SharedCtor() {
  _cached_size_ = 0;
  raw_log_ = NULL;
  channel_group_id_ = const_cast< ::std::string*>(&_default_channel_group_id_);
  channel_pool_id_ = const_cast< ::std::string*>(&_default_channel_pool_id_);
  v_banner_id_ = const_cast< ::std::string*>(&_default_v_banner_id_);
  banner_group_id_ = const_cast< ::std::string*>(&_default_banner_group_id_);
  banner_pool_id_ = const_cast< ::std::string*>(&_default_banner_pool_id_);
  v_solution_id_ = const_cast< ::std::string*>(&_default_v_solution_id_);
  campaign_id_ = const_cast< ::std::string*>(&_default_campaign_id_);
  advertiser_id_ = const_cast< ::std::string*>(&_default_advertiser_id_);
  region_id_ = const_cast< ::std::string*>(&_default_region_id_);
  language_id_ = const_cast< ::std::string*>(&_default_language_id_);
  os_id_ = const_cast< ::std::string*>(&_default_os_id_);
  browser_id_ = const_cast< ::std::string*>(&_default_browser_id_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SawLog::~SawLog() {
  SharedDtor();
}

void SawLog::SharedDtor() {
  if (channel_group_id_ != &_default_channel_group_id_) {
    delete channel_group_id_;
  }
  if (channel_pool_id_ != &_default_channel_pool_id_) {
    delete channel_pool_id_;
  }
  if (v_banner_id_ != &_default_v_banner_id_) {
    delete v_banner_id_;
  }
  if (banner_group_id_ != &_default_banner_group_id_) {
    delete banner_group_id_;
  }
  if (banner_pool_id_ != &_default_banner_pool_id_) {
    delete banner_pool_id_;
  }
  if (v_solution_id_ != &_default_v_solution_id_) {
    delete v_solution_id_;
  }
  if (campaign_id_ != &_default_campaign_id_) {
    delete campaign_id_;
  }
  if (advertiser_id_ != &_default_advertiser_id_) {
    delete advertiser_id_;
  }
  if (region_id_ != &_default_region_id_) {
    delete region_id_;
  }
  if (language_id_ != &_default_language_id_) {
    delete language_id_;
  }
  if (os_id_ != &_default_os_id_) {
    delete os_id_;
  }
  if (browser_id_ != &_default_browser_id_) {
    delete browser_id_;
  }
  if (this != default_instance_) {
    delete raw_log_;
  }
}

void SawLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SawLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SawLog_descriptor_;
}

const SawLog& SawLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_carpenter_5flog_2eproto();  return *default_instance_;
}

SawLog* SawLog::default_instance_ = NULL;

SawLog* SawLog::New() const {
  return new SawLog;
}

void SawLog::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (raw_log_ != NULL) raw_log_->::carpenter::RawLog::Clear();
    }
    if (_has_bit(1)) {
      if (channel_group_id_ != &_default_channel_group_id_) {
        channel_group_id_->clear();
      }
    }
    if (_has_bit(2)) {
      if (channel_pool_id_ != &_default_channel_pool_id_) {
        channel_pool_id_->clear();
      }
    }
    if (_has_bit(3)) {
      if (v_banner_id_ != &_default_v_banner_id_) {
        v_banner_id_->clear();
      }
    }
    if (_has_bit(4)) {
      if (banner_group_id_ != &_default_banner_group_id_) {
        banner_group_id_->clear();
      }
    }
    if (_has_bit(5)) {
      if (banner_pool_id_ != &_default_banner_pool_id_) {
        banner_pool_id_->clear();
      }
    }
    if (_has_bit(6)) {
      if (v_solution_id_ != &_default_v_solution_id_) {
        v_solution_id_->clear();
      }
    }
    if (_has_bit(7)) {
      if (campaign_id_ != &_default_campaign_id_) {
        campaign_id_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (advertiser_id_ != &_default_advertiser_id_) {
        advertiser_id_->clear();
      }
    }
    if (_has_bit(9)) {
      if (region_id_ != &_default_region_id_) {
        region_id_->clear();
      }
    }
    if (_has_bit(10)) {
      if (language_id_ != &_default_language_id_) {
        language_id_->clear();
      }
    }
    if (_has_bit(11)) {
      if (os_id_ != &_default_os_id_) {
        os_id_->clear();
      }
    }
    if (_has_bit(12)) {
      if (browser_id_ != &_default_browser_id_) {
        browser_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SawLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .carpenter.RawLog raw_log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_raw_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_channel_group_id;
        break;
      }
      
      // optional string channel_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_group_id().data(), this->channel_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_channel_pool_id;
        break;
      }
      
      // optional string channel_pool_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel_pool_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_pool_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channel_pool_id().data(), this->channel_pool_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_v_banner_id;
        break;
      }
      
      // optional string v_banner_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_banner_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_banner_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_banner_id().data(), this->v_banner_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_banner_group_id;
        break;
      }
      
      // optional string banner_group_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner_group_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_group_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banner_group_id().data(), this->banner_group_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_banner_pool_id;
        break;
      }
      
      // optional string banner_pool_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_banner_pool_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_banner_pool_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->banner_pool_id().data(), this->banner_pool_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_v_solution_id;
        break;
      }
      
      // optional string v_solution_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_solution_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_solution_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->v_solution_id().data(), this->v_solution_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_campaign_id;
        break;
      }
      
      // optional string campaign_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campaign_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_campaign_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->campaign_id().data(), this->campaign_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_advertiser_id;
        break;
      }
      
      // optional string advertiser_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advertiser_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advertiser_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->advertiser_id().data(), this->advertiser_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_region_id;
        break;
      }
      
      // optional string region_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_region_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_region_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->region_id().data(), this->region_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_language_id;
        break;
      }
      
      // optional string language_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_language_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_language_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->language_id().data(), this->language_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_os_id;
        break;
      }
      
      // optional string os_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_id().data(), this->os_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_browser_id;
        break;
      }
      
      // optional string browser_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_browser_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_browser_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->browser_id().data(), this->browser_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((160000u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SawLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .carpenter.RawLog raw_log = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->raw_log(), output);
  }
  
  // optional string channel_group_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_group_id().data(), this->channel_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->channel_group_id(), output);
  }
  
  // optional string channel_pool_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_pool_id().data(), this->channel_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->channel_pool_id(), output);
  }
  
  // optional string v_banner_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_id().data(), this->v_banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->v_banner_id(), output);
  }
  
  // optional string banner_group_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner_group_id().data(), this->banner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->banner_group_id(), output);
  }
  
  // optional string banner_pool_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner_pool_id().data(), this->banner_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->banner_pool_id(), output);
  }
  
  // optional string v_solution_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_solution_id().data(), this->v_solution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->v_solution_id(), output);
  }
  
  // optional string campaign_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->campaign_id().data(), this->campaign_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->campaign_id(), output);
  }
  
  // optional string advertiser_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->advertiser_id().data(), this->advertiser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->advertiser_id(), output);
  }
  
  // optional string region_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region_id().data(), this->region_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->region_id(), output);
  }
  
  // optional string language_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language_id().data(), this->language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->language_id(), output);
  }
  
  // optional string os_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_id().data(), this->os_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->os_id(), output);
  }
  
  // optional string browser_id = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browser_id().data(), this->browser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->browser_id(), output);
  }
  
  // Extension range [20000, 536870912)
  _extensions_.SerializeWithCachedSizes(
      20000, 536870912, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SawLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .carpenter.RawLog raw_log = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->raw_log(), target);
  }
  
  // optional string channel_group_id = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_group_id().data(), this->channel_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_group_id(), target);
  }
  
  // optional string channel_pool_id = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channel_pool_id().data(), this->channel_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->channel_pool_id(), target);
  }
  
  // optional string v_banner_id = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_banner_id().data(), this->v_banner_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->v_banner_id(), target);
  }
  
  // optional string banner_group_id = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner_group_id().data(), this->banner_group_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->banner_group_id(), target);
  }
  
  // optional string banner_pool_id = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->banner_pool_id().data(), this->banner_pool_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->banner_pool_id(), target);
  }
  
  // optional string v_solution_id = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->v_solution_id().data(), this->v_solution_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->v_solution_id(), target);
  }
  
  // optional string campaign_id = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->campaign_id().data(), this->campaign_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->campaign_id(), target);
  }
  
  // optional string advertiser_id = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->advertiser_id().data(), this->advertiser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->advertiser_id(), target);
  }
  
  // optional string region_id = 10;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->region_id().data(), this->region_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->region_id(), target);
  }
  
  // optional string language_id = 11;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->language_id().data(), this->language_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->language_id(), target);
  }
  
  // optional string os_id = 12;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_id().data(), this->os_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->os_id(), target);
  }
  
  // optional string browser_id = 13;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->browser_id().data(), this->browser_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->browser_id(), target);
  }
  
  // Extension range [20000, 536870912)
  target = _extensions_.SerializeWithCachedSizesToArray(
      20000, 536870912, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SawLog::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .carpenter.RawLog raw_log = 1;
    if (has_raw_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->raw_log());
    }
    
    // optional string channel_group_id = 2;
    if (has_channel_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_group_id());
    }
    
    // optional string channel_pool_id = 3;
    if (has_channel_pool_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_pool_id());
    }
    
    // optional string v_banner_id = 4;
    if (has_v_banner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_banner_id());
    }
    
    // optional string banner_group_id = 5;
    if (has_banner_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_group_id());
    }
    
    // optional string banner_pool_id = 6;
    if (has_banner_pool_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->banner_pool_id());
    }
    
    // optional string v_solution_id = 7;
    if (has_v_solution_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_solution_id());
    }
    
    // optional string campaign_id = 8;
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->campaign_id());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string advertiser_id = 9;
    if (has_advertiser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advertiser_id());
    }
    
    // optional string region_id = 10;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->region_id());
    }
    
    // optional string language_id = 11;
    if (has_language_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->language_id());
    }
    
    // optional string os_id = 12;
    if (has_os_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_id());
    }
    
    // optional string browser_id = 13;
    if (has_browser_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->browser_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SawLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SawLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SawLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SawLog::MergeFrom(const SawLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_raw_log()->::carpenter::RawLog::MergeFrom(from.raw_log());
    }
    if (from._has_bit(1)) {
      set_channel_group_id(from.channel_group_id());
    }
    if (from._has_bit(2)) {
      set_channel_pool_id(from.channel_pool_id());
    }
    if (from._has_bit(3)) {
      set_v_banner_id(from.v_banner_id());
    }
    if (from._has_bit(4)) {
      set_banner_group_id(from.banner_group_id());
    }
    if (from._has_bit(5)) {
      set_banner_pool_id(from.banner_pool_id());
    }
    if (from._has_bit(6)) {
      set_v_solution_id(from.v_solution_id());
    }
    if (from._has_bit(7)) {
      set_campaign_id(from.campaign_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_advertiser_id(from.advertiser_id());
    }
    if (from._has_bit(9)) {
      set_region_id(from.region_id());
    }
    if (from._has_bit(10)) {
      set_language_id(from.language_id());
    }
    if (from._has_bit(11)) {
      set_os_id(from.os_id());
    }
    if (from._has_bit(12)) {
      set_browser_id(from.browser_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SawLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SawLog::CopyFrom(const SawLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SawLog::IsInitialized() const {
  
  if (has_raw_log()) {
    if (!this->raw_log().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void SawLog::Swap(SawLog* other) {
  if (other != this) {
    std::swap(raw_log_, other->raw_log_);
    std::swap(channel_group_id_, other->channel_group_id_);
    std::swap(channel_pool_id_, other->channel_pool_id_);
    std::swap(v_banner_id_, other->v_banner_id_);
    std::swap(banner_group_id_, other->banner_group_id_);
    std::swap(banner_pool_id_, other->banner_pool_id_);
    std::swap(v_solution_id_, other->v_solution_id_);
    std::swap(campaign_id_, other->campaign_id_);
    std::swap(advertiser_id_, other->advertiser_id_);
    std::swap(region_id_, other->region_id_);
    std::swap(language_id_, other->language_id_);
    std::swap(os_id_, other->os_id_);
    std::swap(browser_id_, other->browser_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata SawLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SawLog_descriptor_;
  metadata.reflection = SawLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace carpenter

// @@protoc_insertion_point(global_scope)
