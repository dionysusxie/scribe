// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: carpenter_log.proto

#ifndef PROTOBUF_carpenter_5flog_2eproto__INCLUDED
#define PROTOBUF_carpenter_5flog_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace carpenter {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_carpenter_5flog_2eproto();
void protobuf_AssignDesc_carpenter_5flog_2eproto();
void protobuf_ShutdownFile_carpenter_5flog_2eproto();

class RawLog;
class Pair;
class CSSawLog;
class SawLog;

enum ThreeValueBool {
  UNKNOWN = 0,
  TRUE = 1,
  FALSE = 2
};
bool ThreeValueBool_IsValid(int value);
const ThreeValueBool ThreeValueBool_MIN = UNKNOWN;
const ThreeValueBool ThreeValueBool_MAX = FALSE;
const int ThreeValueBool_ARRAYSIZE = ThreeValueBool_MAX + 1;

const ::google::protobuf::EnumDescriptor* ThreeValueBool_descriptor();
inline const ::std::string& ThreeValueBool_Name(ThreeValueBool value) {
  return ::google::protobuf::internal::NameOfEnum(
    ThreeValueBool_descriptor(), value);
}
inline bool ThreeValueBool_Parse(
    const ::std::string& name, ThreeValueBool* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ThreeValueBool>(
    ThreeValueBool_descriptor(), name, value);
}
enum LogType {
  SHOW = 1,
  CLICK = 2,
  TRACK = 3,
  IDIGGER = 4,
  IDIGGER_EVENT = 5
};
bool LogType_IsValid(int value);
const LogType LogType_MIN = SHOW;
const LogType LogType_MAX = IDIGGER_EVENT;
const int LogType_ARRAYSIZE = LogType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogType_descriptor();
inline const ::std::string& LogType_Name(LogType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogType_descriptor(), value);
}
inline bool LogType_Parse(
    const ::std::string& name, LogType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogType>(
    LogType_descriptor(), name, value);
}
enum AppType {
  BROWSER = 0,
  MOBILE_SDK = 1,
  MOBILE_BROWSER = 2
};
bool AppType_IsValid(int value);
const AppType AppType_MIN = BROWSER;
const AppType AppType_MAX = MOBILE_BROWSER;
const int AppType_ARRAYSIZE = AppType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AppType_descriptor();
inline const ::std::string& AppType_Name(AppType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AppType_descriptor(), value);
}
inline bool AppType_Parse(
    const ::std::string& name, AppType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AppType>(
    AppType_descriptor(), name, value);
}
// ===================================================================

class RawLog : public ::google::protobuf::Message {
 public:
  RawLog();
  virtual ~RawLog();
  
  RawLog(const RawLog& from);
  
  inline RawLog& operator=(const RawLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RawLog& default_instance();
  
  void Swap(RawLog* other);
  
  // implements Message ----------------------------------------------
  
  RawLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RawLog& from);
  void MergeFrom(const RawLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 timestamp = 1;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);
  
  // optional .carpenter.LogType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline carpenter::LogType type() const;
  inline void set_type(carpenter::LogType value);
  
  // optional string db_name = 3;
  inline bool has_db_name() const;
  inline void clear_db_name();
  static const int kDbNameFieldNumber = 3;
  inline const ::std::string& db_name() const;
  inline void set_db_name(const ::std::string& value);
  inline void set_db_name(const char* value);
  inline void set_db_name(const char* value, size_t size);
  inline ::std::string* mutable_db_name();
  
  // optional string channel_id = 11;
  inline bool has_channel_id() const;
  inline void clear_channel_id();
  static const int kChannelIdFieldNumber = 11;
  inline const ::std::string& channel_id() const;
  inline void set_channel_id(const ::std::string& value);
  inline void set_channel_id(const char* value);
  inline void set_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_id();
  
  // optional string banner_id = 12;
  inline bool has_banner_id() const;
  inline void clear_banner_id();
  static const int kBannerIdFieldNumber = 12;
  inline const ::std::string& banner_id() const;
  inline void set_banner_id(const ::std::string& value);
  inline void set_banner_id(const char* value);
  inline void set_banner_id(const char* value, size_t size);
  inline ::std::string* mutable_banner_id();
  
  // optional string solution_id = 13;
  inline bool has_solution_id() const;
  inline void clear_solution_id();
  static const int kSolutionIdFieldNumber = 13;
  inline const ::std::string& solution_id() const;
  inline void set_solution_id(const ::std::string& value);
  inline void set_solution_id(const char* value);
  inline void set_solution_id(const char* value, size_t size);
  inline ::std::string* mutable_solution_id();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(RawLog)
  // @@protoc_insertion_point(class_scope:carpenter.RawLog)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 timestamp_;
  int type_;
  ::std::string* db_name_;
  static const ::std::string _default_db_name_;
  ::std::string* channel_id_;
  static const ::std::string _default_channel_id_;
  ::std::string* banner_id_;
  static const ::std::string _default_banner_id_;
  ::std::string* solution_id_;
  static const ::std::string _default_solution_id_;
  friend void  protobuf_AddDesc_carpenter_5flog_2eproto();
  friend void protobuf_AssignDesc_carpenter_5flog_2eproto();
  friend void protobuf_ShutdownFile_carpenter_5flog_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RawLog* default_instance_;
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message {
 public:
  Pair();
  virtual ~Pair();
  
  Pair(const Pair& from);
  
  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();
  
  void Swap(Pair* other);
  
  // implements Message ----------------------------------------------
  
  Pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  
  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:carpenter.Pair)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_carpenter_5flog_2eproto();
  friend void protobuf_AssignDesc_carpenter_5flog_2eproto();
  friend void protobuf_ShutdownFile_carpenter_5flog_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Pair* default_instance_;
};
// -------------------------------------------------------------------

class CSSawLog : public ::google::protobuf::Message {
 public:
  CSSawLog();
  virtual ~CSSawLog();
  
  CSSawLog(const CSSawLog& from);
  
  inline CSSawLog& operator=(const CSSawLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CSSawLog& default_instance();
  
  void Swap(CSSawLog* other);
  
  // implements Message ----------------------------------------------
  
  CSSawLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSSawLog& from);
  void MergeFrom(const CSSawLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .carpenter.RawLog raw_log = 1;
  inline bool has_raw_log() const;
  inline void clear_raw_log();
  static const int kRawLogFieldNumber = 1;
  inline const ::carpenter::RawLog& raw_log() const;
  inline ::carpenter::RawLog* mutable_raw_log();
  
  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional string v_advertiser_id = 3;
  inline bool has_v_advertiser_id() const;
  inline void clear_v_advertiser_id();
  static const int kVAdvertiserIdFieldNumber = 3;
  inline const ::std::string& v_advertiser_id() const;
  inline void set_v_advertiser_id(const ::std::string& value);
  inline void set_v_advertiser_id(const char* value);
  inline void set_v_advertiser_id(const char* value, size_t size);
  inline ::std::string* mutable_v_advertiser_id();
  
  // optional string v_solution_id = 4;
  inline bool has_v_solution_id() const;
  inline void clear_v_solution_id();
  static const int kVSolutionIdFieldNumber = 4;
  inline const ::std::string& v_solution_id() const;
  inline void set_v_solution_id(const ::std::string& value);
  inline void set_v_solution_id(const char* value);
  inline void set_v_solution_id(const char* value, size_t size);
  inline ::std::string* mutable_v_solution_id();
  
  // optional string v_campaign_id = 5;
  inline bool has_v_campaign_id() const;
  inline void clear_v_campaign_id();
  static const int kVCampaignIdFieldNumber = 5;
  inline const ::std::string& v_campaign_id() const;
  inline void set_v_campaign_id(const ::std::string& value);
  inline void set_v_campaign_id(const char* value);
  inline void set_v_campaign_id(const char* value, size_t size);
  inline ::std::string* mutable_v_campaign_id();
  
  // optional string v_channel_id = 6;
  inline bool has_v_channel_id() const;
  inline void clear_v_channel_id();
  static const int kVChannelIdFieldNumber = 6;
  inline const ::std::string& v_channel_id() const;
  inline void set_v_channel_id(const ::std::string& value);
  inline void set_v_channel_id(const char* value);
  inline void set_v_channel_id(const char* value, size_t size);
  inline ::std::string* mutable_v_channel_id();
  
  // optional string v_channel_group_id = 7;
  inline bool has_v_channel_group_id() const;
  inline void clear_v_channel_group_id();
  static const int kVChannelGroupIdFieldNumber = 7;
  inline const ::std::string& v_channel_group_id() const;
  inline void set_v_channel_group_id(const ::std::string& value);
  inline void set_v_channel_group_id(const char* value);
  inline void set_v_channel_group_id(const char* value, size_t size);
  inline ::std::string* mutable_v_channel_group_id();
  
  // optional string v_channel_pool_id = 8;
  inline bool has_v_channel_pool_id() const;
  inline void clear_v_channel_pool_id();
  static const int kVChannelPoolIdFieldNumber = 8;
  inline const ::std::string& v_channel_pool_id() const;
  inline void set_v_channel_pool_id(const ::std::string& value);
  inline void set_v_channel_pool_id(const char* value);
  inline void set_v_channel_pool_id(const char* value, size_t size);
  inline ::std::string* mutable_v_channel_pool_id();
  
  // optional string v_banner_id = 9;
  inline bool has_v_banner_id() const;
  inline void clear_v_banner_id();
  static const int kVBannerIdFieldNumber = 9;
  inline const ::std::string& v_banner_id() const;
  inline void set_v_banner_id(const ::std::string& value);
  inline void set_v_banner_id(const char* value);
  inline void set_v_banner_id(const char* value, size_t size);
  inline ::std::string* mutable_v_banner_id();
  
  // optional string v_parent_banner_id = 10;
  inline bool has_v_parent_banner_id() const;
  inline void clear_v_parent_banner_id();
  static const int kVParentBannerIdFieldNumber = 10;
  inline const ::std::string& v_parent_banner_id() const;
  inline void set_v_parent_banner_id(const ::std::string& value);
  inline void set_v_parent_banner_id(const char* value);
  inline void set_v_parent_banner_id(const char* value, size_t size);
  inline ::std::string* mutable_v_parent_banner_id();
  
  // optional string v_banner_group_id = 11;
  inline bool has_v_banner_group_id() const;
  inline void clear_v_banner_group_id();
  static const int kVBannerGroupIdFieldNumber = 11;
  inline const ::std::string& v_banner_group_id() const;
  inline void set_v_banner_group_id(const ::std::string& value);
  inline void set_v_banner_group_id(const char* value);
  inline void set_v_banner_group_id(const char* value, size_t size);
  inline ::std::string* mutable_v_banner_group_id();
  
  // optional string v_banner_pool_id = 12;
  inline bool has_v_banner_pool_id() const;
  inline void clear_v_banner_pool_id();
  static const int kVBannerPoolIdFieldNumber = 12;
  inline const ::std::string& v_banner_pool_id() const;
  inline void set_v_banner_pool_id(const ::std::string& value);
  inline void set_v_banner_pool_id(const char* value);
  inline void set_v_banner_pool_id(const char* value, size_t size);
  inline ::std::string* mutable_v_banner_pool_id();
  
  // repeated .carpenter.Pair placement_kvs = 13;
  inline int placement_kvs_size() const;
  inline void clear_placement_kvs();
  static const int kPlacementKvsFieldNumber = 13;
  inline const ::carpenter::Pair& placement_kvs(int index) const;
  inline ::carpenter::Pair* mutable_placement_kvs(int index);
  inline ::carpenter::Pair* add_placement_kvs();
  inline const ::google::protobuf::RepeatedPtrField< ::carpenter::Pair >&
      placement_kvs() const;
  inline ::google::protobuf::RepeatedPtrField< ::carpenter::Pair >*
      mutable_placement_kvs();
  
  // optional string region_id = 14;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 14;
  inline const ::std::string& region_id() const;
  inline void set_region_id(const ::std::string& value);
  inline void set_region_id(const char* value);
  inline void set_region_id(const char* value, size_t size);
  inline ::std::string* mutable_region_id();
  
  // optional string language_id = 15;
  inline bool has_language_id() const;
  inline void clear_language_id();
  static const int kLanguageIdFieldNumber = 15;
  inline const ::std::string& language_id() const;
  inline void set_language_id(const ::std::string& value);
  inline void set_language_id(const char* value);
  inline void set_language_id(const char* value, size_t size);
  inline ::std::string* mutable_language_id();
  
  // optional string os_id = 16;
  inline bool has_os_id() const;
  inline void clear_os_id();
  static const int kOsIdFieldNumber = 16;
  inline const ::std::string& os_id() const;
  inline void set_os_id(const ::std::string& value);
  inline void set_os_id(const char* value);
  inline void set_os_id(const char* value, size_t size);
  inline ::std::string* mutable_os_id();
  
  // optional string browser_id = 17;
  inline bool has_browser_id() const;
  inline void clear_browser_id();
  static const int kBrowserIdFieldNumber = 17;
  inline const ::std::string& browser_id() const;
  inline void set_browser_id(const ::std::string& value);
  inline void set_browser_id(const char* value);
  inline void set_browser_id(const char* value, size_t size);
  inline ::std::string* mutable_browser_id();
  
  // optional string operator_id = 18;
  inline bool has_operator_id() const;
  inline void clear_operator_id();
  static const int kOperatorIdFieldNumber = 18;
  inline const ::std::string& operator_id() const;
  inline void set_operator_id(const ::std::string& value);
  inline void set_operator_id(const char* value);
  inline void set_operator_id(const char* value, size_t size);
  inline ::std::string* mutable_operator_id();
  
  // optional bool is_casting = 19;
  inline bool has_is_casting() const;
  inline void clear_is_casting();
  static const int kIsCastingFieldNumber = 19;
  inline bool is_casting() const;
  inline void set_is_casting(bool value);
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(CSSawLog)
  // @@protoc_insertion_point(class_scope:carpenter.CSSawLog)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::carpenter::RawLog* raw_log_;
  ::google::protobuf::uint32 count_;
  ::std::string* v_advertiser_id_;
  static const ::std::string _default_v_advertiser_id_;
  ::std::string* v_solution_id_;
  static const ::std::string _default_v_solution_id_;
  ::std::string* v_campaign_id_;
  static const ::std::string _default_v_campaign_id_;
  ::std::string* v_channel_id_;
  static const ::std::string _default_v_channel_id_;
  ::std::string* v_channel_group_id_;
  static const ::std::string _default_v_channel_group_id_;
  ::std::string* v_channel_pool_id_;
  static const ::std::string _default_v_channel_pool_id_;
  ::std::string* v_banner_id_;
  static const ::std::string _default_v_banner_id_;
  ::std::string* v_parent_banner_id_;
  static const ::std::string _default_v_parent_banner_id_;
  ::std::string* v_banner_group_id_;
  static const ::std::string _default_v_banner_group_id_;
  ::std::string* v_banner_pool_id_;
  static const ::std::string _default_v_banner_pool_id_;
  ::google::protobuf::RepeatedPtrField< ::carpenter::Pair > placement_kvs_;
  ::std::string* region_id_;
  static const ::std::string _default_region_id_;
  ::std::string* language_id_;
  static const ::std::string _default_language_id_;
  ::std::string* os_id_;
  static const ::std::string _default_os_id_;
  ::std::string* browser_id_;
  static const ::std::string _default_browser_id_;
  ::std::string* operator_id_;
  static const ::std::string _default_operator_id_;
  bool is_casting_;
  friend void  protobuf_AddDesc_carpenter_5flog_2eproto();
  friend void protobuf_AssignDesc_carpenter_5flog_2eproto();
  friend void protobuf_ShutdownFile_carpenter_5flog_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CSSawLog* default_instance_;
};
// -------------------------------------------------------------------

class SawLog : public ::google::protobuf::Message {
 public:
  SawLog();
  virtual ~SawLog();
  
  SawLog(const SawLog& from);
  
  inline SawLog& operator=(const SawLog& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SawLog& default_instance();
  
  void Swap(SawLog* other);
  
  // implements Message ----------------------------------------------
  
  SawLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SawLog& from);
  void MergeFrom(const SawLog& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .carpenter.RawLog raw_log = 1;
  inline bool has_raw_log() const;
  inline void clear_raw_log();
  static const int kRawLogFieldNumber = 1;
  inline const ::carpenter::RawLog& raw_log() const;
  inline ::carpenter::RawLog* mutable_raw_log();
  
  // optional string channel_group_id = 2;
  inline bool has_channel_group_id() const;
  inline void clear_channel_group_id();
  static const int kChannelGroupIdFieldNumber = 2;
  inline const ::std::string& channel_group_id() const;
  inline void set_channel_group_id(const ::std::string& value);
  inline void set_channel_group_id(const char* value);
  inline void set_channel_group_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_group_id();
  
  // optional string channel_pool_id = 3;
  inline bool has_channel_pool_id() const;
  inline void clear_channel_pool_id();
  static const int kChannelPoolIdFieldNumber = 3;
  inline const ::std::string& channel_pool_id() const;
  inline void set_channel_pool_id(const ::std::string& value);
  inline void set_channel_pool_id(const char* value);
  inline void set_channel_pool_id(const char* value, size_t size);
  inline ::std::string* mutable_channel_pool_id();
  
  // optional string v_banner_id = 4;
  inline bool has_v_banner_id() const;
  inline void clear_v_banner_id();
  static const int kVBannerIdFieldNumber = 4;
  inline const ::std::string& v_banner_id() const;
  inline void set_v_banner_id(const ::std::string& value);
  inline void set_v_banner_id(const char* value);
  inline void set_v_banner_id(const char* value, size_t size);
  inline ::std::string* mutable_v_banner_id();
  
  // optional string banner_group_id = 5;
  inline bool has_banner_group_id() const;
  inline void clear_banner_group_id();
  static const int kBannerGroupIdFieldNumber = 5;
  inline const ::std::string& banner_group_id() const;
  inline void set_banner_group_id(const ::std::string& value);
  inline void set_banner_group_id(const char* value);
  inline void set_banner_group_id(const char* value, size_t size);
  inline ::std::string* mutable_banner_group_id();
  
  // optional string banner_pool_id = 6;
  inline bool has_banner_pool_id() const;
  inline void clear_banner_pool_id();
  static const int kBannerPoolIdFieldNumber = 6;
  inline const ::std::string& banner_pool_id() const;
  inline void set_banner_pool_id(const ::std::string& value);
  inline void set_banner_pool_id(const char* value);
  inline void set_banner_pool_id(const char* value, size_t size);
  inline ::std::string* mutable_banner_pool_id();
  
  // optional string v_solution_id = 7;
  inline bool has_v_solution_id() const;
  inline void clear_v_solution_id();
  static const int kVSolutionIdFieldNumber = 7;
  inline const ::std::string& v_solution_id() const;
  inline void set_v_solution_id(const ::std::string& value);
  inline void set_v_solution_id(const char* value);
  inline void set_v_solution_id(const char* value, size_t size);
  inline ::std::string* mutable_v_solution_id();
  
  // optional string campaign_id = 8;
  inline bool has_campaign_id() const;
  inline void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 8;
  inline const ::std::string& campaign_id() const;
  inline void set_campaign_id(const ::std::string& value);
  inline void set_campaign_id(const char* value);
  inline void set_campaign_id(const char* value, size_t size);
  inline ::std::string* mutable_campaign_id();
  
  // optional string advertiser_id = 9;
  inline bool has_advertiser_id() const;
  inline void clear_advertiser_id();
  static const int kAdvertiserIdFieldNumber = 9;
  inline const ::std::string& advertiser_id() const;
  inline void set_advertiser_id(const ::std::string& value);
  inline void set_advertiser_id(const char* value);
  inline void set_advertiser_id(const char* value, size_t size);
  inline ::std::string* mutable_advertiser_id();
  
  // optional string region_id = 10;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 10;
  inline const ::std::string& region_id() const;
  inline void set_region_id(const ::std::string& value);
  inline void set_region_id(const char* value);
  inline void set_region_id(const char* value, size_t size);
  inline ::std::string* mutable_region_id();
  
  // optional string language_id = 11;
  inline bool has_language_id() const;
  inline void clear_language_id();
  static const int kLanguageIdFieldNumber = 11;
  inline const ::std::string& language_id() const;
  inline void set_language_id(const ::std::string& value);
  inline void set_language_id(const char* value);
  inline void set_language_id(const char* value, size_t size);
  inline ::std::string* mutable_language_id();
  
  // optional string os_id = 12;
  inline bool has_os_id() const;
  inline void clear_os_id();
  static const int kOsIdFieldNumber = 12;
  inline const ::std::string& os_id() const;
  inline void set_os_id(const ::std::string& value);
  inline void set_os_id(const char* value);
  inline void set_os_id(const char* value, size_t size);
  inline ::std::string* mutable_os_id();
  
  // optional string browser_id = 13;
  inline bool has_browser_id() const;
  inline void clear_browser_id();
  static const int kBrowserIdFieldNumber = 13;
  inline const ::std::string& browser_id() const;
  inline void set_browser_id(const ::std::string& value);
  inline void set_browser_id(const char* value);
  inline void set_browser_id(const char* value, size_t size);
  inline ::std::string* mutable_browser_id();
  
  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(SawLog)
  // @@protoc_insertion_point(class_scope:carpenter.SawLog)
 private:
  ::google::protobuf::internal::ExtensionSet _extensions_;
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::carpenter::RawLog* raw_log_;
  ::std::string* channel_group_id_;
  static const ::std::string _default_channel_group_id_;
  ::std::string* channel_pool_id_;
  static const ::std::string _default_channel_pool_id_;
  ::std::string* v_banner_id_;
  static const ::std::string _default_v_banner_id_;
  ::std::string* banner_group_id_;
  static const ::std::string _default_banner_group_id_;
  ::std::string* banner_pool_id_;
  static const ::std::string _default_banner_pool_id_;
  ::std::string* v_solution_id_;
  static const ::std::string _default_v_solution_id_;
  ::std::string* campaign_id_;
  static const ::std::string _default_campaign_id_;
  ::std::string* advertiser_id_;
  static const ::std::string _default_advertiser_id_;
  ::std::string* region_id_;
  static const ::std::string _default_region_id_;
  ::std::string* language_id_;
  static const ::std::string _default_language_id_;
  ::std::string* os_id_;
  static const ::std::string _default_os_id_;
  ::std::string* browser_id_;
  static const ::std::string _default_browser_id_;
  friend void  protobuf_AddDesc_carpenter_5flog_2eproto();
  friend void protobuf_AssignDesc_carpenter_5flog_2eproto();
  friend void protobuf_ShutdownFile_carpenter_5flog_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SawLog* default_instance_;
};
// ===================================================================


// ===================================================================

// RawLog

// optional uint64 timestamp = 1;
inline bool RawLog::has_timestamp() const {
  return _has_bit(0);
}
inline void RawLog::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 RawLog::timestamp() const {
  return timestamp_;
}
inline void RawLog::set_timestamp(::google::protobuf::uint64 value) {
  _set_bit(0);
  timestamp_ = value;
}

// optional .carpenter.LogType type = 2;
inline bool RawLog::has_type() const {
  return _has_bit(1);
}
inline void RawLog::clear_type() {
  type_ = 1;
  _clear_bit(1);
}
inline carpenter::LogType RawLog::type() const {
  return static_cast< carpenter::LogType >(type_);
}
inline void RawLog::set_type(carpenter::LogType value) {
  GOOGLE_DCHECK(carpenter::LogType_IsValid(value));
  _set_bit(1);
  type_ = value;
}

// optional string db_name = 3;
inline bool RawLog::has_db_name() const {
  return _has_bit(2);
}
inline void RawLog::clear_db_name() {
  if (db_name_ != &_default_db_name_) {
    db_name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& RawLog::db_name() const {
  return *db_name_;
}
inline void RawLog::set_db_name(const ::std::string& value) {
  _set_bit(2);
  if (db_name_ == &_default_db_name_) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(value);
}
inline void RawLog::set_db_name(const char* value) {
  _set_bit(2);
  if (db_name_ == &_default_db_name_) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(value);
}
inline void RawLog::set_db_name(const char* value, size_t size) {
  _set_bit(2);
  if (db_name_ == &_default_db_name_) {
    db_name_ = new ::std::string;
  }
  db_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawLog::mutable_db_name() {
  _set_bit(2);
  if (db_name_ == &_default_db_name_) {
    db_name_ = new ::std::string;
  }
  return db_name_;
}

// optional string channel_id = 11;
inline bool RawLog::has_channel_id() const {
  return _has_bit(3);
}
inline void RawLog::clear_channel_id() {
  if (channel_id_ != &_default_channel_id_) {
    channel_id_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& RawLog::channel_id() const {
  return *channel_id_;
}
inline void RawLog::set_channel_id(const ::std::string& value) {
  _set_bit(3);
  if (channel_id_ == &_default_channel_id_) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void RawLog::set_channel_id(const char* value) {
  _set_bit(3);
  if (channel_id_ == &_default_channel_id_) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(value);
}
inline void RawLog::set_channel_id(const char* value, size_t size) {
  _set_bit(3);
  if (channel_id_ == &_default_channel_id_) {
    channel_id_ = new ::std::string;
  }
  channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawLog::mutable_channel_id() {
  _set_bit(3);
  if (channel_id_ == &_default_channel_id_) {
    channel_id_ = new ::std::string;
  }
  return channel_id_;
}

// optional string banner_id = 12;
inline bool RawLog::has_banner_id() const {
  return _has_bit(4);
}
inline void RawLog::clear_banner_id() {
  if (banner_id_ != &_default_banner_id_) {
    banner_id_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RawLog::banner_id() const {
  return *banner_id_;
}
inline void RawLog::set_banner_id(const ::std::string& value) {
  _set_bit(4);
  if (banner_id_ == &_default_banner_id_) {
    banner_id_ = new ::std::string;
  }
  banner_id_->assign(value);
}
inline void RawLog::set_banner_id(const char* value) {
  _set_bit(4);
  if (banner_id_ == &_default_banner_id_) {
    banner_id_ = new ::std::string;
  }
  banner_id_->assign(value);
}
inline void RawLog::set_banner_id(const char* value, size_t size) {
  _set_bit(4);
  if (banner_id_ == &_default_banner_id_) {
    banner_id_ = new ::std::string;
  }
  banner_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawLog::mutable_banner_id() {
  _set_bit(4);
  if (banner_id_ == &_default_banner_id_) {
    banner_id_ = new ::std::string;
  }
  return banner_id_;
}

// optional string solution_id = 13;
inline bool RawLog::has_solution_id() const {
  return _has_bit(5);
}
inline void RawLog::clear_solution_id() {
  if (solution_id_ != &_default_solution_id_) {
    solution_id_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& RawLog::solution_id() const {
  return *solution_id_;
}
inline void RawLog::set_solution_id(const ::std::string& value) {
  _set_bit(5);
  if (solution_id_ == &_default_solution_id_) {
    solution_id_ = new ::std::string;
  }
  solution_id_->assign(value);
}
inline void RawLog::set_solution_id(const char* value) {
  _set_bit(5);
  if (solution_id_ == &_default_solution_id_) {
    solution_id_ = new ::std::string;
  }
  solution_id_->assign(value);
}
inline void RawLog::set_solution_id(const char* value, size_t size) {
  _set_bit(5);
  if (solution_id_ == &_default_solution_id_) {
    solution_id_ = new ::std::string;
  }
  solution_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RawLog::mutable_solution_id() {
  _set_bit(5);
  if (solution_id_ == &_default_solution_id_) {
    solution_id_ = new ::std::string;
  }
  return solution_id_;
}

// -------------------------------------------------------------------

// Pair

// required string key = 1;
inline bool Pair::has_key() const {
  return _has_bit(0);
}
inline void Pair::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Pair::key() const {
  return *key_;
}
inline void Pair::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Pair::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Pair::set_key(const char* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pair::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// required string value = 2;
inline bool Pair::has_value() const {
  return _has_bit(1);
}
inline void Pair::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Pair::value() const {
  return *value_;
}
inline void Pair::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Pair::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Pair::set_value(const char* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pair::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// CSSawLog

// optional .carpenter.RawLog raw_log = 1;
inline bool CSSawLog::has_raw_log() const {
  return _has_bit(0);
}
inline void CSSawLog::clear_raw_log() {
  if (raw_log_ != NULL) raw_log_->::carpenter::RawLog::Clear();
  _clear_bit(0);
}
inline const ::carpenter::RawLog& CSSawLog::raw_log() const {
  return raw_log_ != NULL ? *raw_log_ : *default_instance_->raw_log_;
}
inline ::carpenter::RawLog* CSSawLog::mutable_raw_log() {
  _set_bit(0);
  if (raw_log_ == NULL) raw_log_ = new ::carpenter::RawLog;
  return raw_log_;
}

// optional uint32 count = 2;
inline bool CSSawLog::has_count() const {
  return _has_bit(1);
}
inline void CSSawLog::clear_count() {
  count_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 CSSawLog::count() const {
  return count_;
}
inline void CSSawLog::set_count(::google::protobuf::uint32 value) {
  _set_bit(1);
  count_ = value;
}

// optional string v_advertiser_id = 3;
inline bool CSSawLog::has_v_advertiser_id() const {
  return _has_bit(2);
}
inline void CSSawLog::clear_v_advertiser_id() {
  if (v_advertiser_id_ != &_default_v_advertiser_id_) {
    v_advertiser_id_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& CSSawLog::v_advertiser_id() const {
  return *v_advertiser_id_;
}
inline void CSSawLog::set_v_advertiser_id(const ::std::string& value) {
  _set_bit(2);
  if (v_advertiser_id_ == &_default_v_advertiser_id_) {
    v_advertiser_id_ = new ::std::string;
  }
  v_advertiser_id_->assign(value);
}
inline void CSSawLog::set_v_advertiser_id(const char* value) {
  _set_bit(2);
  if (v_advertiser_id_ == &_default_v_advertiser_id_) {
    v_advertiser_id_ = new ::std::string;
  }
  v_advertiser_id_->assign(value);
}
inline void CSSawLog::set_v_advertiser_id(const char* value, size_t size) {
  _set_bit(2);
  if (v_advertiser_id_ == &_default_v_advertiser_id_) {
    v_advertiser_id_ = new ::std::string;
  }
  v_advertiser_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_advertiser_id() {
  _set_bit(2);
  if (v_advertiser_id_ == &_default_v_advertiser_id_) {
    v_advertiser_id_ = new ::std::string;
  }
  return v_advertiser_id_;
}

// optional string v_solution_id = 4;
inline bool CSSawLog::has_v_solution_id() const {
  return _has_bit(3);
}
inline void CSSawLog::clear_v_solution_id() {
  if (v_solution_id_ != &_default_v_solution_id_) {
    v_solution_id_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& CSSawLog::v_solution_id() const {
  return *v_solution_id_;
}
inline void CSSawLog::set_v_solution_id(const ::std::string& value) {
  _set_bit(3);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  v_solution_id_->assign(value);
}
inline void CSSawLog::set_v_solution_id(const char* value) {
  _set_bit(3);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  v_solution_id_->assign(value);
}
inline void CSSawLog::set_v_solution_id(const char* value, size_t size) {
  _set_bit(3);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  v_solution_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_solution_id() {
  _set_bit(3);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  return v_solution_id_;
}

// optional string v_campaign_id = 5;
inline bool CSSawLog::has_v_campaign_id() const {
  return _has_bit(4);
}
inline void CSSawLog::clear_v_campaign_id() {
  if (v_campaign_id_ != &_default_v_campaign_id_) {
    v_campaign_id_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& CSSawLog::v_campaign_id() const {
  return *v_campaign_id_;
}
inline void CSSawLog::set_v_campaign_id(const ::std::string& value) {
  _set_bit(4);
  if (v_campaign_id_ == &_default_v_campaign_id_) {
    v_campaign_id_ = new ::std::string;
  }
  v_campaign_id_->assign(value);
}
inline void CSSawLog::set_v_campaign_id(const char* value) {
  _set_bit(4);
  if (v_campaign_id_ == &_default_v_campaign_id_) {
    v_campaign_id_ = new ::std::string;
  }
  v_campaign_id_->assign(value);
}
inline void CSSawLog::set_v_campaign_id(const char* value, size_t size) {
  _set_bit(4);
  if (v_campaign_id_ == &_default_v_campaign_id_) {
    v_campaign_id_ = new ::std::string;
  }
  v_campaign_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_campaign_id() {
  _set_bit(4);
  if (v_campaign_id_ == &_default_v_campaign_id_) {
    v_campaign_id_ = new ::std::string;
  }
  return v_campaign_id_;
}

// optional string v_channel_id = 6;
inline bool CSSawLog::has_v_channel_id() const {
  return _has_bit(5);
}
inline void CSSawLog::clear_v_channel_id() {
  if (v_channel_id_ != &_default_v_channel_id_) {
    v_channel_id_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& CSSawLog::v_channel_id() const {
  return *v_channel_id_;
}
inline void CSSawLog::set_v_channel_id(const ::std::string& value) {
  _set_bit(5);
  if (v_channel_id_ == &_default_v_channel_id_) {
    v_channel_id_ = new ::std::string;
  }
  v_channel_id_->assign(value);
}
inline void CSSawLog::set_v_channel_id(const char* value) {
  _set_bit(5);
  if (v_channel_id_ == &_default_v_channel_id_) {
    v_channel_id_ = new ::std::string;
  }
  v_channel_id_->assign(value);
}
inline void CSSawLog::set_v_channel_id(const char* value, size_t size) {
  _set_bit(5);
  if (v_channel_id_ == &_default_v_channel_id_) {
    v_channel_id_ = new ::std::string;
  }
  v_channel_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_channel_id() {
  _set_bit(5);
  if (v_channel_id_ == &_default_v_channel_id_) {
    v_channel_id_ = new ::std::string;
  }
  return v_channel_id_;
}

// optional string v_channel_group_id = 7;
inline bool CSSawLog::has_v_channel_group_id() const {
  return _has_bit(6);
}
inline void CSSawLog::clear_v_channel_group_id() {
  if (v_channel_group_id_ != &_default_v_channel_group_id_) {
    v_channel_group_id_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& CSSawLog::v_channel_group_id() const {
  return *v_channel_group_id_;
}
inline void CSSawLog::set_v_channel_group_id(const ::std::string& value) {
  _set_bit(6);
  if (v_channel_group_id_ == &_default_v_channel_group_id_) {
    v_channel_group_id_ = new ::std::string;
  }
  v_channel_group_id_->assign(value);
}
inline void CSSawLog::set_v_channel_group_id(const char* value) {
  _set_bit(6);
  if (v_channel_group_id_ == &_default_v_channel_group_id_) {
    v_channel_group_id_ = new ::std::string;
  }
  v_channel_group_id_->assign(value);
}
inline void CSSawLog::set_v_channel_group_id(const char* value, size_t size) {
  _set_bit(6);
  if (v_channel_group_id_ == &_default_v_channel_group_id_) {
    v_channel_group_id_ = new ::std::string;
  }
  v_channel_group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_channel_group_id() {
  _set_bit(6);
  if (v_channel_group_id_ == &_default_v_channel_group_id_) {
    v_channel_group_id_ = new ::std::string;
  }
  return v_channel_group_id_;
}

// optional string v_channel_pool_id = 8;
inline bool CSSawLog::has_v_channel_pool_id() const {
  return _has_bit(7);
}
inline void CSSawLog::clear_v_channel_pool_id() {
  if (v_channel_pool_id_ != &_default_v_channel_pool_id_) {
    v_channel_pool_id_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& CSSawLog::v_channel_pool_id() const {
  return *v_channel_pool_id_;
}
inline void CSSawLog::set_v_channel_pool_id(const ::std::string& value) {
  _set_bit(7);
  if (v_channel_pool_id_ == &_default_v_channel_pool_id_) {
    v_channel_pool_id_ = new ::std::string;
  }
  v_channel_pool_id_->assign(value);
}
inline void CSSawLog::set_v_channel_pool_id(const char* value) {
  _set_bit(7);
  if (v_channel_pool_id_ == &_default_v_channel_pool_id_) {
    v_channel_pool_id_ = new ::std::string;
  }
  v_channel_pool_id_->assign(value);
}
inline void CSSawLog::set_v_channel_pool_id(const char* value, size_t size) {
  _set_bit(7);
  if (v_channel_pool_id_ == &_default_v_channel_pool_id_) {
    v_channel_pool_id_ = new ::std::string;
  }
  v_channel_pool_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_channel_pool_id() {
  _set_bit(7);
  if (v_channel_pool_id_ == &_default_v_channel_pool_id_) {
    v_channel_pool_id_ = new ::std::string;
  }
  return v_channel_pool_id_;
}

// optional string v_banner_id = 9;
inline bool CSSawLog::has_v_banner_id() const {
  return _has_bit(8);
}
inline void CSSawLog::clear_v_banner_id() {
  if (v_banner_id_ != &_default_v_banner_id_) {
    v_banner_id_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& CSSawLog::v_banner_id() const {
  return *v_banner_id_;
}
inline void CSSawLog::set_v_banner_id(const ::std::string& value) {
  _set_bit(8);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  v_banner_id_->assign(value);
}
inline void CSSawLog::set_v_banner_id(const char* value) {
  _set_bit(8);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  v_banner_id_->assign(value);
}
inline void CSSawLog::set_v_banner_id(const char* value, size_t size) {
  _set_bit(8);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  v_banner_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_banner_id() {
  _set_bit(8);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  return v_banner_id_;
}

// optional string v_parent_banner_id = 10;
inline bool CSSawLog::has_v_parent_banner_id() const {
  return _has_bit(9);
}
inline void CSSawLog::clear_v_parent_banner_id() {
  if (v_parent_banner_id_ != &_default_v_parent_banner_id_) {
    v_parent_banner_id_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& CSSawLog::v_parent_banner_id() const {
  return *v_parent_banner_id_;
}
inline void CSSawLog::set_v_parent_banner_id(const ::std::string& value) {
  _set_bit(9);
  if (v_parent_banner_id_ == &_default_v_parent_banner_id_) {
    v_parent_banner_id_ = new ::std::string;
  }
  v_parent_banner_id_->assign(value);
}
inline void CSSawLog::set_v_parent_banner_id(const char* value) {
  _set_bit(9);
  if (v_parent_banner_id_ == &_default_v_parent_banner_id_) {
    v_parent_banner_id_ = new ::std::string;
  }
  v_parent_banner_id_->assign(value);
}
inline void CSSawLog::set_v_parent_banner_id(const char* value, size_t size) {
  _set_bit(9);
  if (v_parent_banner_id_ == &_default_v_parent_banner_id_) {
    v_parent_banner_id_ = new ::std::string;
  }
  v_parent_banner_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_parent_banner_id() {
  _set_bit(9);
  if (v_parent_banner_id_ == &_default_v_parent_banner_id_) {
    v_parent_banner_id_ = new ::std::string;
  }
  return v_parent_banner_id_;
}

// optional string v_banner_group_id = 11;
inline bool CSSawLog::has_v_banner_group_id() const {
  return _has_bit(10);
}
inline void CSSawLog::clear_v_banner_group_id() {
  if (v_banner_group_id_ != &_default_v_banner_group_id_) {
    v_banner_group_id_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& CSSawLog::v_banner_group_id() const {
  return *v_banner_group_id_;
}
inline void CSSawLog::set_v_banner_group_id(const ::std::string& value) {
  _set_bit(10);
  if (v_banner_group_id_ == &_default_v_banner_group_id_) {
    v_banner_group_id_ = new ::std::string;
  }
  v_banner_group_id_->assign(value);
}
inline void CSSawLog::set_v_banner_group_id(const char* value) {
  _set_bit(10);
  if (v_banner_group_id_ == &_default_v_banner_group_id_) {
    v_banner_group_id_ = new ::std::string;
  }
  v_banner_group_id_->assign(value);
}
inline void CSSawLog::set_v_banner_group_id(const char* value, size_t size) {
  _set_bit(10);
  if (v_banner_group_id_ == &_default_v_banner_group_id_) {
    v_banner_group_id_ = new ::std::string;
  }
  v_banner_group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_banner_group_id() {
  _set_bit(10);
  if (v_banner_group_id_ == &_default_v_banner_group_id_) {
    v_banner_group_id_ = new ::std::string;
  }
  return v_banner_group_id_;
}

// optional string v_banner_pool_id = 12;
inline bool CSSawLog::has_v_banner_pool_id() const {
  return _has_bit(11);
}
inline void CSSawLog::clear_v_banner_pool_id() {
  if (v_banner_pool_id_ != &_default_v_banner_pool_id_) {
    v_banner_pool_id_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& CSSawLog::v_banner_pool_id() const {
  return *v_banner_pool_id_;
}
inline void CSSawLog::set_v_banner_pool_id(const ::std::string& value) {
  _set_bit(11);
  if (v_banner_pool_id_ == &_default_v_banner_pool_id_) {
    v_banner_pool_id_ = new ::std::string;
  }
  v_banner_pool_id_->assign(value);
}
inline void CSSawLog::set_v_banner_pool_id(const char* value) {
  _set_bit(11);
  if (v_banner_pool_id_ == &_default_v_banner_pool_id_) {
    v_banner_pool_id_ = new ::std::string;
  }
  v_banner_pool_id_->assign(value);
}
inline void CSSawLog::set_v_banner_pool_id(const char* value, size_t size) {
  _set_bit(11);
  if (v_banner_pool_id_ == &_default_v_banner_pool_id_) {
    v_banner_pool_id_ = new ::std::string;
  }
  v_banner_pool_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_v_banner_pool_id() {
  _set_bit(11);
  if (v_banner_pool_id_ == &_default_v_banner_pool_id_) {
    v_banner_pool_id_ = new ::std::string;
  }
  return v_banner_pool_id_;
}

// repeated .carpenter.Pair placement_kvs = 13;
inline int CSSawLog::placement_kvs_size() const {
  return placement_kvs_.size();
}
inline void CSSawLog::clear_placement_kvs() {
  placement_kvs_.Clear();
}
inline const ::carpenter::Pair& CSSawLog::placement_kvs(int index) const {
  return placement_kvs_.Get(index);
}
inline ::carpenter::Pair* CSSawLog::mutable_placement_kvs(int index) {
  return placement_kvs_.Mutable(index);
}
inline ::carpenter::Pair* CSSawLog::add_placement_kvs() {
  return placement_kvs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::carpenter::Pair >&
CSSawLog::placement_kvs() const {
  return placement_kvs_;
}
inline ::google::protobuf::RepeatedPtrField< ::carpenter::Pair >*
CSSawLog::mutable_placement_kvs() {
  return &placement_kvs_;
}

// optional string region_id = 14;
inline bool CSSawLog::has_region_id() const {
  return _has_bit(13);
}
inline void CSSawLog::clear_region_id() {
  if (region_id_ != &_default_region_id_) {
    region_id_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& CSSawLog::region_id() const {
  return *region_id_;
}
inline void CSSawLog::set_region_id(const ::std::string& value) {
  _set_bit(13);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  region_id_->assign(value);
}
inline void CSSawLog::set_region_id(const char* value) {
  _set_bit(13);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  region_id_->assign(value);
}
inline void CSSawLog::set_region_id(const char* value, size_t size) {
  _set_bit(13);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  region_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_region_id() {
  _set_bit(13);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  return region_id_;
}

// optional string language_id = 15;
inline bool CSSawLog::has_language_id() const {
  return _has_bit(14);
}
inline void CSSawLog::clear_language_id() {
  if (language_id_ != &_default_language_id_) {
    language_id_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& CSSawLog::language_id() const {
  return *language_id_;
}
inline void CSSawLog::set_language_id(const ::std::string& value) {
  _set_bit(14);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  language_id_->assign(value);
}
inline void CSSawLog::set_language_id(const char* value) {
  _set_bit(14);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  language_id_->assign(value);
}
inline void CSSawLog::set_language_id(const char* value, size_t size) {
  _set_bit(14);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  language_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_language_id() {
  _set_bit(14);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  return language_id_;
}

// optional string os_id = 16;
inline bool CSSawLog::has_os_id() const {
  return _has_bit(15);
}
inline void CSSawLog::clear_os_id() {
  if (os_id_ != &_default_os_id_) {
    os_id_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& CSSawLog::os_id() const {
  return *os_id_;
}
inline void CSSawLog::set_os_id(const ::std::string& value) {
  _set_bit(15);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  os_id_->assign(value);
}
inline void CSSawLog::set_os_id(const char* value) {
  _set_bit(15);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  os_id_->assign(value);
}
inline void CSSawLog::set_os_id(const char* value, size_t size) {
  _set_bit(15);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  os_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_os_id() {
  _set_bit(15);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  return os_id_;
}

// optional string browser_id = 17;
inline bool CSSawLog::has_browser_id() const {
  return _has_bit(16);
}
inline void CSSawLog::clear_browser_id() {
  if (browser_id_ != &_default_browser_id_) {
    browser_id_->clear();
  }
  _clear_bit(16);
}
inline const ::std::string& CSSawLog::browser_id() const {
  return *browser_id_;
}
inline void CSSawLog::set_browser_id(const ::std::string& value) {
  _set_bit(16);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  browser_id_->assign(value);
}
inline void CSSawLog::set_browser_id(const char* value) {
  _set_bit(16);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  browser_id_->assign(value);
}
inline void CSSawLog::set_browser_id(const char* value, size_t size) {
  _set_bit(16);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  browser_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_browser_id() {
  _set_bit(16);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  return browser_id_;
}

// optional string operator_id = 18;
inline bool CSSawLog::has_operator_id() const {
  return _has_bit(17);
}
inline void CSSawLog::clear_operator_id() {
  if (operator_id_ != &_default_operator_id_) {
    operator_id_->clear();
  }
  _clear_bit(17);
}
inline const ::std::string& CSSawLog::operator_id() const {
  return *operator_id_;
}
inline void CSSawLog::set_operator_id(const ::std::string& value) {
  _set_bit(17);
  if (operator_id_ == &_default_operator_id_) {
    operator_id_ = new ::std::string;
  }
  operator_id_->assign(value);
}
inline void CSSawLog::set_operator_id(const char* value) {
  _set_bit(17);
  if (operator_id_ == &_default_operator_id_) {
    operator_id_ = new ::std::string;
  }
  operator_id_->assign(value);
}
inline void CSSawLog::set_operator_id(const char* value, size_t size) {
  _set_bit(17);
  if (operator_id_ == &_default_operator_id_) {
    operator_id_ = new ::std::string;
  }
  operator_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSSawLog::mutable_operator_id() {
  _set_bit(17);
  if (operator_id_ == &_default_operator_id_) {
    operator_id_ = new ::std::string;
  }
  return operator_id_;
}

// optional bool is_casting = 19;
inline bool CSSawLog::has_is_casting() const {
  return _has_bit(18);
}
inline void CSSawLog::clear_is_casting() {
  is_casting_ = false;
  _clear_bit(18);
}
inline bool CSSawLog::is_casting() const {
  return is_casting_;
}
inline void CSSawLog::set_is_casting(bool value) {
  _set_bit(18);
  is_casting_ = value;
}

// -------------------------------------------------------------------

// SawLog

// optional .carpenter.RawLog raw_log = 1;
inline bool SawLog::has_raw_log() const {
  return _has_bit(0);
}
inline void SawLog::clear_raw_log() {
  if (raw_log_ != NULL) raw_log_->::carpenter::RawLog::Clear();
  _clear_bit(0);
}
inline const ::carpenter::RawLog& SawLog::raw_log() const {
  return raw_log_ != NULL ? *raw_log_ : *default_instance_->raw_log_;
}
inline ::carpenter::RawLog* SawLog::mutable_raw_log() {
  _set_bit(0);
  if (raw_log_ == NULL) raw_log_ = new ::carpenter::RawLog;
  return raw_log_;
}

// optional string channel_group_id = 2;
inline bool SawLog::has_channel_group_id() const {
  return _has_bit(1);
}
inline void SawLog::clear_channel_group_id() {
  if (channel_group_id_ != &_default_channel_group_id_) {
    channel_group_id_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SawLog::channel_group_id() const {
  return *channel_group_id_;
}
inline void SawLog::set_channel_group_id(const ::std::string& value) {
  _set_bit(1);
  if (channel_group_id_ == &_default_channel_group_id_) {
    channel_group_id_ = new ::std::string;
  }
  channel_group_id_->assign(value);
}
inline void SawLog::set_channel_group_id(const char* value) {
  _set_bit(1);
  if (channel_group_id_ == &_default_channel_group_id_) {
    channel_group_id_ = new ::std::string;
  }
  channel_group_id_->assign(value);
}
inline void SawLog::set_channel_group_id(const char* value, size_t size) {
  _set_bit(1);
  if (channel_group_id_ == &_default_channel_group_id_) {
    channel_group_id_ = new ::std::string;
  }
  channel_group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_channel_group_id() {
  _set_bit(1);
  if (channel_group_id_ == &_default_channel_group_id_) {
    channel_group_id_ = new ::std::string;
  }
  return channel_group_id_;
}

// optional string channel_pool_id = 3;
inline bool SawLog::has_channel_pool_id() const {
  return _has_bit(2);
}
inline void SawLog::clear_channel_pool_id() {
  if (channel_pool_id_ != &_default_channel_pool_id_) {
    channel_pool_id_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& SawLog::channel_pool_id() const {
  return *channel_pool_id_;
}
inline void SawLog::set_channel_pool_id(const ::std::string& value) {
  _set_bit(2);
  if (channel_pool_id_ == &_default_channel_pool_id_) {
    channel_pool_id_ = new ::std::string;
  }
  channel_pool_id_->assign(value);
}
inline void SawLog::set_channel_pool_id(const char* value) {
  _set_bit(2);
  if (channel_pool_id_ == &_default_channel_pool_id_) {
    channel_pool_id_ = new ::std::string;
  }
  channel_pool_id_->assign(value);
}
inline void SawLog::set_channel_pool_id(const char* value, size_t size) {
  _set_bit(2);
  if (channel_pool_id_ == &_default_channel_pool_id_) {
    channel_pool_id_ = new ::std::string;
  }
  channel_pool_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_channel_pool_id() {
  _set_bit(2);
  if (channel_pool_id_ == &_default_channel_pool_id_) {
    channel_pool_id_ = new ::std::string;
  }
  return channel_pool_id_;
}

// optional string v_banner_id = 4;
inline bool SawLog::has_v_banner_id() const {
  return _has_bit(3);
}
inline void SawLog::clear_v_banner_id() {
  if (v_banner_id_ != &_default_v_banner_id_) {
    v_banner_id_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SawLog::v_banner_id() const {
  return *v_banner_id_;
}
inline void SawLog::set_v_banner_id(const ::std::string& value) {
  _set_bit(3);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  v_banner_id_->assign(value);
}
inline void SawLog::set_v_banner_id(const char* value) {
  _set_bit(3);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  v_banner_id_->assign(value);
}
inline void SawLog::set_v_banner_id(const char* value, size_t size) {
  _set_bit(3);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  v_banner_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_v_banner_id() {
  _set_bit(3);
  if (v_banner_id_ == &_default_v_banner_id_) {
    v_banner_id_ = new ::std::string;
  }
  return v_banner_id_;
}

// optional string banner_group_id = 5;
inline bool SawLog::has_banner_group_id() const {
  return _has_bit(4);
}
inline void SawLog::clear_banner_group_id() {
  if (banner_group_id_ != &_default_banner_group_id_) {
    banner_group_id_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SawLog::banner_group_id() const {
  return *banner_group_id_;
}
inline void SawLog::set_banner_group_id(const ::std::string& value) {
  _set_bit(4);
  if (banner_group_id_ == &_default_banner_group_id_) {
    banner_group_id_ = new ::std::string;
  }
  banner_group_id_->assign(value);
}
inline void SawLog::set_banner_group_id(const char* value) {
  _set_bit(4);
  if (banner_group_id_ == &_default_banner_group_id_) {
    banner_group_id_ = new ::std::string;
  }
  banner_group_id_->assign(value);
}
inline void SawLog::set_banner_group_id(const char* value, size_t size) {
  _set_bit(4);
  if (banner_group_id_ == &_default_banner_group_id_) {
    banner_group_id_ = new ::std::string;
  }
  banner_group_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_banner_group_id() {
  _set_bit(4);
  if (banner_group_id_ == &_default_banner_group_id_) {
    banner_group_id_ = new ::std::string;
  }
  return banner_group_id_;
}

// optional string banner_pool_id = 6;
inline bool SawLog::has_banner_pool_id() const {
  return _has_bit(5);
}
inline void SawLog::clear_banner_pool_id() {
  if (banner_pool_id_ != &_default_banner_pool_id_) {
    banner_pool_id_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& SawLog::banner_pool_id() const {
  return *banner_pool_id_;
}
inline void SawLog::set_banner_pool_id(const ::std::string& value) {
  _set_bit(5);
  if (banner_pool_id_ == &_default_banner_pool_id_) {
    banner_pool_id_ = new ::std::string;
  }
  banner_pool_id_->assign(value);
}
inline void SawLog::set_banner_pool_id(const char* value) {
  _set_bit(5);
  if (banner_pool_id_ == &_default_banner_pool_id_) {
    banner_pool_id_ = new ::std::string;
  }
  banner_pool_id_->assign(value);
}
inline void SawLog::set_banner_pool_id(const char* value, size_t size) {
  _set_bit(5);
  if (banner_pool_id_ == &_default_banner_pool_id_) {
    banner_pool_id_ = new ::std::string;
  }
  banner_pool_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_banner_pool_id() {
  _set_bit(5);
  if (banner_pool_id_ == &_default_banner_pool_id_) {
    banner_pool_id_ = new ::std::string;
  }
  return banner_pool_id_;
}

// optional string v_solution_id = 7;
inline bool SawLog::has_v_solution_id() const {
  return _has_bit(6);
}
inline void SawLog::clear_v_solution_id() {
  if (v_solution_id_ != &_default_v_solution_id_) {
    v_solution_id_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& SawLog::v_solution_id() const {
  return *v_solution_id_;
}
inline void SawLog::set_v_solution_id(const ::std::string& value) {
  _set_bit(6);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  v_solution_id_->assign(value);
}
inline void SawLog::set_v_solution_id(const char* value) {
  _set_bit(6);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  v_solution_id_->assign(value);
}
inline void SawLog::set_v_solution_id(const char* value, size_t size) {
  _set_bit(6);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  v_solution_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_v_solution_id() {
  _set_bit(6);
  if (v_solution_id_ == &_default_v_solution_id_) {
    v_solution_id_ = new ::std::string;
  }
  return v_solution_id_;
}

// optional string campaign_id = 8;
inline bool SawLog::has_campaign_id() const {
  return _has_bit(7);
}
inline void SawLog::clear_campaign_id() {
  if (campaign_id_ != &_default_campaign_id_) {
    campaign_id_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SawLog::campaign_id() const {
  return *campaign_id_;
}
inline void SawLog::set_campaign_id(const ::std::string& value) {
  _set_bit(7);
  if (campaign_id_ == &_default_campaign_id_) {
    campaign_id_ = new ::std::string;
  }
  campaign_id_->assign(value);
}
inline void SawLog::set_campaign_id(const char* value) {
  _set_bit(7);
  if (campaign_id_ == &_default_campaign_id_) {
    campaign_id_ = new ::std::string;
  }
  campaign_id_->assign(value);
}
inline void SawLog::set_campaign_id(const char* value, size_t size) {
  _set_bit(7);
  if (campaign_id_ == &_default_campaign_id_) {
    campaign_id_ = new ::std::string;
  }
  campaign_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_campaign_id() {
  _set_bit(7);
  if (campaign_id_ == &_default_campaign_id_) {
    campaign_id_ = new ::std::string;
  }
  return campaign_id_;
}

// optional string advertiser_id = 9;
inline bool SawLog::has_advertiser_id() const {
  return _has_bit(8);
}
inline void SawLog::clear_advertiser_id() {
  if (advertiser_id_ != &_default_advertiser_id_) {
    advertiser_id_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& SawLog::advertiser_id() const {
  return *advertiser_id_;
}
inline void SawLog::set_advertiser_id(const ::std::string& value) {
  _set_bit(8);
  if (advertiser_id_ == &_default_advertiser_id_) {
    advertiser_id_ = new ::std::string;
  }
  advertiser_id_->assign(value);
}
inline void SawLog::set_advertiser_id(const char* value) {
  _set_bit(8);
  if (advertiser_id_ == &_default_advertiser_id_) {
    advertiser_id_ = new ::std::string;
  }
  advertiser_id_->assign(value);
}
inline void SawLog::set_advertiser_id(const char* value, size_t size) {
  _set_bit(8);
  if (advertiser_id_ == &_default_advertiser_id_) {
    advertiser_id_ = new ::std::string;
  }
  advertiser_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_advertiser_id() {
  _set_bit(8);
  if (advertiser_id_ == &_default_advertiser_id_) {
    advertiser_id_ = new ::std::string;
  }
  return advertiser_id_;
}

// optional string region_id = 10;
inline bool SawLog::has_region_id() const {
  return _has_bit(9);
}
inline void SawLog::clear_region_id() {
  if (region_id_ != &_default_region_id_) {
    region_id_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& SawLog::region_id() const {
  return *region_id_;
}
inline void SawLog::set_region_id(const ::std::string& value) {
  _set_bit(9);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  region_id_->assign(value);
}
inline void SawLog::set_region_id(const char* value) {
  _set_bit(9);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  region_id_->assign(value);
}
inline void SawLog::set_region_id(const char* value, size_t size) {
  _set_bit(9);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  region_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_region_id() {
  _set_bit(9);
  if (region_id_ == &_default_region_id_) {
    region_id_ = new ::std::string;
  }
  return region_id_;
}

// optional string language_id = 11;
inline bool SawLog::has_language_id() const {
  return _has_bit(10);
}
inline void SawLog::clear_language_id() {
  if (language_id_ != &_default_language_id_) {
    language_id_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& SawLog::language_id() const {
  return *language_id_;
}
inline void SawLog::set_language_id(const ::std::string& value) {
  _set_bit(10);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  language_id_->assign(value);
}
inline void SawLog::set_language_id(const char* value) {
  _set_bit(10);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  language_id_->assign(value);
}
inline void SawLog::set_language_id(const char* value, size_t size) {
  _set_bit(10);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  language_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_language_id() {
  _set_bit(10);
  if (language_id_ == &_default_language_id_) {
    language_id_ = new ::std::string;
  }
  return language_id_;
}

// optional string os_id = 12;
inline bool SawLog::has_os_id() const {
  return _has_bit(11);
}
inline void SawLog::clear_os_id() {
  if (os_id_ != &_default_os_id_) {
    os_id_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& SawLog::os_id() const {
  return *os_id_;
}
inline void SawLog::set_os_id(const ::std::string& value) {
  _set_bit(11);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  os_id_->assign(value);
}
inline void SawLog::set_os_id(const char* value) {
  _set_bit(11);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  os_id_->assign(value);
}
inline void SawLog::set_os_id(const char* value, size_t size) {
  _set_bit(11);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  os_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_os_id() {
  _set_bit(11);
  if (os_id_ == &_default_os_id_) {
    os_id_ = new ::std::string;
  }
  return os_id_;
}

// optional string browser_id = 13;
inline bool SawLog::has_browser_id() const {
  return _has_bit(12);
}
inline void SawLog::clear_browser_id() {
  if (browser_id_ != &_default_browser_id_) {
    browser_id_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& SawLog::browser_id() const {
  return *browser_id_;
}
inline void SawLog::set_browser_id(const ::std::string& value) {
  _set_bit(12);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  browser_id_->assign(value);
}
inline void SawLog::set_browser_id(const char* value) {
  _set_bit(12);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  browser_id_->assign(value);
}
inline void SawLog::set_browser_id(const char* value, size_t size) {
  _set_bit(12);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  browser_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SawLog::mutable_browser_id() {
  _set_bit(12);
  if (browser_id_ == &_default_browser_id_) {
    browser_id_ = new ::std::string;
  }
  return browser_id_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace carpenter

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< carpenter::ThreeValueBool>() {
  return carpenter::ThreeValueBool_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< carpenter::LogType>() {
  return carpenter::LogType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< carpenter::AppType>() {
  return carpenter::AppType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_carpenter_5flog_2eproto__INCLUDED
